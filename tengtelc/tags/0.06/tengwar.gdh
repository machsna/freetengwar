// Tengwar Telcontar - a Tengwar unicode typeface.
// Copyright (C) 2005-2006 Johan Winge
// 
// Tengwar Telcontar is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of the
// License, or (at your option) any later version.
// 
// As a special exception, if you create a document which uses this
// font, and embed this font or unaltered portions of this font into
// the document, this font does not by itself cause the resulting
// document to be covered by the GNU General Public License. This
// exception does not however invalidate any other reasons why the
// document might be covered by the GNU General Public License. If you
// modify this font, you may extend this exception to your version of
// the font, but you are not obligated to do so. If you do not wish to
// do so, delete this exception statement from your version.
// 
// Tengwar Telcontar is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tengwar Telcontar; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

table(feature)
  tengconnect {
    id=201;
    name.LG_USENG = string("Connect tengwar");
    default = true;
  }
  silmepref {
    id=202;
    name.LG_USENG = string("Tehta on Silme");
    default = left;
    settings {
      left {
        value=0;
        name.LG_USENG = string("Always to the left");
      }
      prefleft {
        value=1;
        name.LG_USENG = string("Prefer left");
      }
      prefright {
        value=2;
        name.LG_USENG = string("Prefer right");
      }
      right {
        value=3;
        name.LG_USENG = string("Always to the right");
      }
    }
  }
  capteng {
    id=203;
    name.LG_USENG = string("'Capital' tengwar");
    default = non;
    settings {
      non {
        value=0;
        name.LG_USENG = string("None");
      }
      init {
        value=1;
        name.LG_USENG = string("Word initially");
      }
      all {
        value=2;
        name.LG_USENG = string("All");
      }
    }
  }
  descwtengwa {
    id=204;
    name.LG_USENG = string("Descending w-tengwa");
    default = true;
  }
endtable;

table(glyph)
  Tinco=(g_tinco,g_tinco_conr,g_tinco_conl,g_tinco_conb,g_tinco_lig,g_tinco_cap);
  Parma=(g_parma,g_parma_conr,g_parma_conl,g_parma_conb,g_parma_cap);
  Calma=(g_calma,g_calma_conr,g_calma_cap);
  Quesse=(g_quesse,g_quesse_conr,g_quesse_conl,g_quesse_conb,g_quesse_cap);
  Ando=(g_ando,g_ando_conr,g_ando_conl,g_ando_conb,g_ando_cap);
  Umbar=(g_umbar,g_umbar_conr,g_umbar_conl,g_umbar_conb,g_umbar_cap);
  Anga=(g_anga,g_anga_conr,g_anga_cap);
  Ungwe=(g_ungwe,g_ungwe_conr,g_ungwe_conl,g_ungwe_conb,g_ungwe_cap);
  Thuule=(g_thuule,g_thuule_conr,g_thuule_cap);
  Formen=(g_formen,g_formen_conr,g_formen_cap);
  Harma=(g_harma,g_harma_conr,g_harma_cap);
  Hwesta=(g_hwesta,g_hwesta_conr,g_hwesta_conl,g_hwesta_conb,g_hwesta_cap);
  Anto=(g_anto,g_anto_conr,g_anto_cap);
  Ampa=(g_ampa,g_ampa_conr,g_ampa_cap);
  Anca=(g_anca,g_anca_conr,g_anca_cap);
  Unque=(g_unque,g_unque_conr,g_unque_conl,g_unque_conb,g_unque_cap);
  Nuumen=(g_nuumen,g_nuumen_conr,g_nuumen_conl,g_nuumen_conb,g_nuumen_cap);
  Malta=(g_malta,g_malta_conr,g_malta_conl,g_malta_conb,g_malta_cap);
  Noldo=(g_noldo,g_noldo_conr,g_noldo_cap);
  Nwalme=(g_nwalme,g_nwalme_conr,g_nwalme_conl,g_nwalme_conb,g_nwalme_cap);
  Oore=(g_oore,g_oore_conr,g_oore_conl,g_oore_conb,g_oore_cap);
  Vala=(g_vala,g_vala_conr,g_vala_conl,g_vala_conb,g_vala_cap);
  Anna=(g_anna,g_anna_conr,g_anna_cap);
  Vilya=(g_vilya,g_vilya_conr,g_vilya_conl,g_vilya_conb,g_vilya_cap);
  ExtThuule=(g_extthuule,g_extthuule_conr,g_extthuule_cap);
  ExtFormen=(g_extformen,g_extformen_conr,g_extformen_cap);
  ExtHarma=(g_extharma,g_extharma_cap);
  ExtHwesta=(g_exthwesta,g_exthwesta_conl,g_exthwesta_cap);
  ExtAnto=(g_extanto,g_extanto_conr,g_extanto_cap);
  ExtAmpa=(g_extampa,g_extampa_conr,g_extampa_cap);
  ExtAnca=(g_extanca,g_extanca_cap);
  ExtUnque=(g_extunque,g_extunque_conl,g_extunque_cap);
  Roomen=(g_roomen,g_roomen_conl,g_roomen_open,g_roomen_conl_open);
  Arda=(g_arda,g_arda_conl,g_arda_open,g_arda_conl_open);
  Lambe=(g_lambe,g_lambe_conr,g_lambe_conl,g_lambe_conb,g_lambe_cap);
  Alda=(g_alda,g_alda_conr,g_alda_conl,g_alda_conb,g_alda_cap);
  Silme=(g_silme,g_silme_open,g_silme_flat,g_silme_lig,g_silme_lig_open,g_silme_lig_flat,g_silme_lig_harma);
  SilmeNuq=(g_silmenuq,g_silmenuq_open,g_silmenuq_flat);
  Aare=(g_aare,g_aare_open,g_aare_flat);
  AareNuq=(g_aarenuq,g_aarenuq_open,g_aarenuq_flat);
  Hyarmen=(g_hyarmen,g_hyarmen_cap);
  HwestaSin=(g_hwestasin);
  Yanta=(g_yanta,g_yanta_cap);
  Uure=(g_uure);
  LongCarr=(g_longcarr,g_longcarr_conl,g_longcarr_cap);
  Halla=(g_halla,g_halla_cap);
  ShortCarr=(g_shortcarr,g_shortcarr_conr,g_shortcarr_conl,g_shortcarr_conb,g_shortcarr_cap);
  Wtengwa=(g_wtengwa,g_wtengwa_desc);
  Atengwa=(g_atengwa,g_atengwa_cap,g_atengwa_desc);
  ConnCarr=(g_conncarr,g_conncarr_conr);
  Whtengwa=(g_whtengwa);
  OpenAnna=(g_openanna,g_openanna_conl,g_openanna_cap);
  Mhtengwa=(g_mhtengwa,g_mhtengwa_cap);
  BeleriandicMh=(g_beleriandicmh,g_beleriandicmh_cap);
  AngWhtengwa=(g_angwhtengwa);
  Vaiya=(g_vaiya);
  SindYtengwa=(g_sindarinytengwa);
  SHook=(g_shook,g_shook_high);

  NotCapTengwar=(g_tinco,g_parma,g_calma,g_quesse,g_ando,g_umbar,g_anga,g_ungwe,
                 g_thuule,g_formen,g_harma,g_hwesta,g_anto,g_ampa,g_anca,g_unque,
                 g_nuumen,g_malta,g_noldo,g_nwalme,g_oore,g_vala,g_anna,g_vilya,
                 g_extthuule,g_extformen,g_extharma,g_exthwesta,g_extanto,g_extampa,g_extanca,g_extunque,
                 g_lambe,g_alda,g_hyarmen,g_yanta,g_longcarr,g_halla,g_shortcarr,
                 g_atengwa,g_openanna,g_mhtengwa,g_beleriandicmh);
  CapTengwar=    (g_tinco_cap,g_parma_cap,g_calma_cap,g_quesse_cap,g_ando_cap,g_umbar_cap,g_anga_cap,g_ungwe_cap,
                 g_thuule_cap,g_formen_cap,g_harma_cap,g_hwesta_cap,g_anto_cap,g_ampa_cap,g_anca_cap,g_unque_cap,
                 g_nuumen_cap,g_malta_cap,g_noldo_cap,g_nwalme_cap,g_oore_cap,g_vala_cap,g_anna_cap,g_vilya_cap,
                 g_extthuule_cap,g_extformen_cap,g_extharma_cap,g_exthwesta_cap,g_extanto_cap,g_extampa_cap,g_extanca_cap,g_extunque_cap,
                 g_lambe_cap,g_alda_cap,g_hyarmen_cap,g_yanta_cap,g_longcarr_cap,g_halla_cap,g_shortcarr_cap,
                 g_atengwa_cap,g_openanna_cap,g_mhtengwa_cap,g_beleriandicmh_cap);

  WideTengwar=(Ando,Umbar,Anga,Ungwe,Anto,Ampa,Anca,Unque,Nuumen,Malta,Noldo,Nwalme,ExtAnto,ExtAmpa,ExtAnca,ExtUnque,Mhtengwa);
  StemUpRightTengwar=(Harma,Hwesta,Anca,Unque,ExtHarma,ExtHwesta,ExtAnca,ExtUnque,g_silme_flat,g_silme_lig_flat,g_aare_flat,HwestaSin);
  StemUpLeftTengwar=(Thuule,Formen,Anto,Ampa,ExtThuule,ExtFormen,ExtAnto,ExtAmpa,g_silme_open,g_silme_lig_open,g_aare_open,Hyarmen,AngWhtengwa);
  StemDownRightTengwar=(Calma,Quesse,Anga,Ungwe,ExtHarma,ExtHwesta,ExtAnca,ExtUnque,g_silmenuq_flat,g_aarenuq_flat,SindYtengwa);
  StemDownLeftTengwar=(Tinco,Parma,Ando,Umbar,ExtThuule,ExtFormen,ExtAnto,ExtAmpa,Roomen,Arda,g_silmenuq_flat,g_aarenuq_flat,AngWhtengwa);
  NarrowTengwar=(LongCarr,Halla,ShortCarr,ConnCarr);

  AnyTengwa=(Tinco,Parma,Calma,Quesse,Ando,Umbar,Anga,Ungwe,Thuule,Formen,Harma,Hwesta,
             Anto,Ampa,Anca,Unque,Nuumen,Malta,Noldo,Nwalme,Oore,Vala,Anna,Vilya,
             ExtThuule,ExtFormen,ExtHarma,ExtHwesta,ExtAnto,ExtAmpa,ExtAnca,ExtUnque,
             Roomen,Arda,Lambe,Alda,Silme,SilmeNuq,Aare,AareNuq,Hyarmen,HwestaSin,Yanta,Uure,LongCarr,Halla,ShortCarr,
             Wtengwa,Atengwa,ConnCarr,Whtengwa,OpenAnna,Mhtengwa,BeleriandicMh,AngWhtengwa,Vaiya,SindYtengwa,SHook,
             g_nbsp,g_dottedcircle);
  MayConR=(g_calma,g_quesse,g_quesse_conl,g_anga,g_ungwe,g_ungwe_conl,g_noldo,g_nwalme,g_nwalme_conl,g_anna,g_vilya,g_vilya_conl,g_lambe,g_lambe_conl,g_alda,g_alda_conl);
  DoConR=(g_calma_conr,g_quesse_conr,g_quesse_conb,g_anga_conr,g_ungwe_conr,g_ungwe_conb,g_noldo_conr,g_nwalme_conr,g_nwalme_conb,g_anna_conr,g_vilya_conr,g_vilya_conb,g_lambe_conr,g_lambe_conb,g_alda_conr,g_alda_conb);
  MayConL=(g_tinco,g_parma,g_quesse,g_ando,g_umbar,g_ungwe,g_hwesta,g_unque,g_nuumen,g_malta,g_ungwe,g_oore,g_vala,g_vilya,g_exthwesta,g_extunque,g_roomen,g_lambe,g_alda,g_shortcarr,g_longcarr,g_shook);
  DoConL=(g_tinco_conl,g_parma_conl,g_quesse_conl,g_ando_conl,g_umbar_conl,g_ungwe_conl,g_hwesta_conl,g_unque_conl,g_nuumen_conl,g_malta_conl,g_ungwe_conl,g_oore_conl,g_vala_conl,g_vilya_conl,g_exthwesta_conl,g_extunque_conl,g_roomen_conl,g_lambe_conl,g_alda_conl,g_shortcarr_conl,g_longcarr_conl,g_shook_high);
  MayConRLow=(g_tinco,g_tinco_conl,g_ando,g_ando_conl,g_umbar,g_umbar_conl,g_parma,g_parma_conl,g_thuule,g_formen,g_harma,g_hwesta,g_hwesta_conl,g_anto,g_ampa,g_anca,g_unque,g_unque_conl,g_nuumen,g_nuumen_conl,g_malta,g_malta_conl,g_oore,g_oore_conl,g_vala,g_vala_conl,g_shortcarr,g_shortcarr_conl);
  DoConRLow=(g_tinco_conr,g_tinco_conb,g_ando_conr,g_ando_conb,g_umbar_conr,g_umbar_conb,g_parma_conr,g_parma_conb,g_thuule_conr,g_formen_conr,g_harma_conr,g_hwesta_conr,g_hwesta_conb,g_anto_conr,g_ampa_conr,g_anca_conr,g_unque_conr,g_unque_conr,g_nuumen_conr,g_nuumen_conb,g_malta_conr,g_malta_conb,g_oore_conr,g_oore_conb,g_vala_conr,g_vala_conb,g_shortcarr_conr,g_shortcarr_conb);
  MayConLLow=(g_shook); DoConLLow=(g_shook);
  
  IsolUpTehtar=(g_atehta,g_ytehta,g_itehta,g_etehta,g_otehta,g_utehta,g_overbar,g_wtehta,g_engytehta,g_revetehta,g_yantatehta,g_invatehta);
  IsolDownTehtar=(g_downatehta,g_downytehta,g_downitehta,g_downetehta,g_dblunderstroke,g_downotehta,g_downutehta,g_underbar,g_longcarrtehta,g_shooktehta);
  IsolTehtar=(IsolUpTehtar,IsolDownTehtar);

  CombUpTehtar=(g_atehta_norm,g_ytehta_norm,g_itehta_norm,g_etehta_norm,g_otehta_norm,g_utehta_norm,g_overbar_norm,g_wtehta_norm,g_engytehta_norm,g_revetehta_norm,g_yantatehta_norm,g_invatehta_norm);
  CombDownTehtar=(g_downatehta_norm,g_downytehta_norm,g_downitehta_norm,g_downetehta_norm,g_dblunderstroke_norm,g_downotehta_norm,g_downutehta_norm,g_underbar_norm,g_longcarrtehta_norm,g_shooktehta_norm);
  CombTehtar=(CombUpTehtar,CombDownTehtar);
  VarUpTehtar=(g_etehta_double_norm,g_otehta_wide,g_otehta_narrow,g_otehta_double_norm,g_otehta_double_wide,g_otehta_double_narrow,g_utehta_double_norm,g_overbar_wide,g_overbar_lambe,g_overbar_silme,g_wtehta_wide,g_wtehta_narrow,g_engytehta_wide);
  VarDownTehtar=(g_downetehta_double_norm,g_downutehta_wide,g_downutehta_narrow,g_downutehta_long,g_underbar_wide,g_underbar_roomen,g_underbar_silme,g_underbar_lambe,g_longcarrtehta_lambe);
  VarTehtar=(VarUpTehtar,VarDownTehtar);
  AnyUpTehta=(CombUpTehtar,VarUpTehtar);
  AnyDownTehta=(CombDownTehtar,VarDownTehtar);
  AnyTehta=(CombTehtar,VarTehtar);

  OverbarTehta=(g_overbar_norm,g_overbar_wide,g_overbar_lambe,g_overbar_silme);
  UnderbarTehta=(g_underbar_norm,g_underbar_wide,g_underbar_roomen,g_underbar_silme,g_underbar_lambe);

endtable;

// We will deal with at most 4 uptehtar and 4 downtehtar. Change if the need arises.

#define AnyIsolTehtar [[[[[[[IsolTehtar]?IsolTehtar]?IsolTehtar]?IsolTehtar]?IsolTehtar]?IsolTehtar]?IsolTehtar]?
#define AnyIsolUpTehtar [[[[IsolUpTehtar]?IsolUpTehtar]?IsolUpTehtar]?IsolUpTehtar]?
#define AnyIsolDownTehtar [[[[IsolDownTehtar]?IsolDownTehtar]?IsolDownTehtar]?IsolDownTehtar]?

#define AnyTehtar [[[[[[[AnyTehta]?AnyTehta]?AnyTehta]?AnyTehta]?AnyTehta]?AnyTehta]?AnyTehta]?
#define AnyUpTehtar [[[[AnyUpTehta]?AnyUpTehta]?AnyUpTehta]?AnyUpTehta]?
#define AnyDownTehtar [[[[AnyDownTehta]?AnyDownTehta]?AnyDownTehta]?AnyDownTehta]?

table(sub)
  pass(1)
    if (capteng==init)
      NotCapTengwar > CapTengwar / g_space _ ;      
    elseif (capteng==all)
      NotCapTengwar > CapTengwar;      
    endif;
  endpass;
  pass(2)

  // First rules that affect tengwar:


    (g_harma,g_hwesta,g_hwesta_conl) g_tinco > (g_extharma,g_exthwesta,g_exthwesta_conl) g_tinco_lig / ^ _ AnyIsolTehtar g_zwj _ ;
    g_silme > g_silme_lig_harma / ^ _ AnyIsolDownTehtar g_zwj Harma ;
    g_silme > g_silme_lig / ^ _ AnyIsolTehtar g_zwj AnyTengwa ;
    if (tengconnect)
      MayConR MayConL > DoConR DoConL / ^ _ AnyIsolTehtar g_zwj? _ ;
    endif;
    MayConRLow MayConLLow > DoConRLow DoConLLow / ^ _ AnyIsolTehtar g_zwj? _ ;
    (g_roomen,g_roomen_conl,g_arda,g_arda_conl) > (g_roomen_open,g_roomen_conl_open,g_arda_open,g_arda_conl_open)
           / _ AnyIsolUpTehtar IsolDownTehtar ;
    if (silmepref==left)
      (g_silme,g_silme_lig,g_aare) > (g_silme_flat,g_silme_lig_flat,g_aare_flat) / ^ _ AnyIsolDownTehtar IsolUpTehtar ;
      (g_silmenuq,g_aarenuq) > (g_silmenuq_flat,g_aarenuq_flat) / ^ _ AnyIsolDownTehtar IsolDownTehtar ;
    elseif (silmepref==right)
      (g_silme,g_silme_lig,g_aare) > (g_silme_open,g_silme_lig_open,g_aare_open) / ^ _ AnyIsolDownTehtar IsolUpTehtar ;
      (g_silmenuq,g_aarenuq) > (g_silmenuq_open,g_aarenuq_open) / ^ _ AnyIsolUpTehtar IsolDownTehtar ;
    endif;
    if (descwtengwa)
      g_wtengwa > g_wtengwa_desc;
    endif;

  // When none of the above rules match anymore, we proceed to the next character, possibly a tehta:

    // Change "isolated" forms (i.e. on a dotted circle) to non-spacing forms:
    IsolTehtar > CombTehtar / AnyTengwa ^ AnyTehtar _ ;

    // Sort the tehtar. This simplifies things further on.
    AnyUpTehta AnyUpTehta AnyUpTehta AnyUpTehta AnyUpTehta AnyDownTehta > @6 @1 @2 @3 @4 @5 / ^ _ _ _ _ _ _ ;
    AnyUpTehta AnyUpTehta AnyUpTehta AnyUpTehta AnyDownTehta > @5 @1 @2 @3 @4 / ^ _ _ _ _ _ ;
    AnyUpTehta AnyUpTehta AnyUpTehta AnyDownTehta > @4 @1 @2 @3 / ^ _ _ _ _ ;
    AnyUpTehta AnyUpTehta AnyDownTehta > @3 @1 @2 / ^ _ _ _ ;
    AnyUpTehta AnyDownTehta > @2 @1 / ^ _ _ ;
  
    (g_underbar_norm) > g_underbar_roomen / Roomen _ ;
    (g_underbar_norm) > g_underbar_silme / (SilmeNuq,AareNuq) _ ;
    (g_overbar_norm) > g_overbar_silme / (Silme,Aare) AnyDownTehtar _ ;
    (g_overbar_norm,g_underbar_norm,g_otehta_norm,g_wtehta_norm,g_engytehta_norm) > (g_overbar_wide,g_underbar_wide,g_otehta_wide,g_wtehta_wide,g_engytehta_wide)
           / WideTengwar ^ AnyTehtar _ ;
    (g_otehta_norm,g_overbar_norm,g_underbar_norm,g_engytehta_norm) > (g_otehta_wide,g_overbar_lambe,g_underbar_lambe,g_engytehta_wide)
           / (Lambe,Alda) ^ AnyTehtar _ ;
    g_longcarrtehta_norm > g_longcarrtehta_lambe / Lambe g_underbar_lambe? ^ _ ;
    (g_downutehta_norm) > (g_downutehta_long) / (Roomen,Arda,Lambe,Alda,AngWhtengwa) UnderbarTehta? _ ;
    g_wtehta_norm > g_wtehta_narrow / (StemUpRightTengwar,StemUpLeftTengwar,NarrowTengwar) AnyTehtar _ ;
    (g_otehta_norm,g_otehta_double_norm) > (g_otehta_narrow,g_otehta_double_narrow)
           / NarrowTengwar AnyTehtar _ AnyTehtar StemUpLeftTengwar;
    (g_otehta_norm,g_otehta_double_norm) > (g_otehta_narrow,g_otehta_double_narrow) / StemUpRightTengwar AnyTehtar _ ;
 
    g_itehta_norm g_itehta_norm > g_ytehta_norm _ / ^ _ _ ;
    g_etehta_norm g_etehta_norm > g_etehta_double_norm _ / ^ _ _ ;
    g_downetehta_norm g_downetehta_norm > g_downetehta_double_norm _ / ^ _ _ ;
    g_otehta_narrow g_otehta_narrow > g_otehta_double_narrow _ / ^ _ _ ;
    g_otehta_norm g_otehta_norm > g_otehta_double_norm _ / ^ _ _ ;
    g_otehta_wide g_otehta_wide > g_otehta_double_wide _ / ^ _ _ ;
    g_utehta_norm g_utehta_norm > g_utehta_double_norm _ / ^ _ _ ;

  endpass;
endtable;


#define attached user1

table(pos)

  pass(1)
    Lambe g_underbar_lambe { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } AnyDownTehta { attach{ to=@2; at=dap; with=uap }; insert=true; attached=true; } AnyDownTehta { attach{ to=@1; at=dap; with=uap }; insert=true; attached=true; } / ^ _ _ _ _ {attached==false} ;
    Lambe g_underbar_lambe { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } AnyDownTehta { attach{ to=@2; at=dap; with=uap }; insert=true; attached=true; } / ^ _ _ _ {attached==false} ;
    Lambe AnyDownTehta { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } AnyDownTehta { attach{ to=@1; at=dap; with=uap }; insert=true; attached=true; } / ^ _ _ _ {attached==false} ;
    Lambe AnyDownTehta { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } / ^ _ _  {attached==false} ;
    Alda g_underbar_lambe { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } AnyDownTehta { attach{ to=@1; at=dap; with=ruap }; insert=true; attached=true; } / ^ _ _ _ {attached==false} ;
    Alda g_underbar_lambe { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } / ^ _ _ {attached==false} ;

    StemUpRightTengwar OverbarTehta { attach{ to=@1; at=uap; with=ldap }; insert=true; attached=true; }  / ^ _ AnyDownTehtar _ {attached==false} ;
    StemUpLeftTengwar OverbarTehta { attach{ to=@1; at=uap; with=rdap }; insert=true; attached=true; }  / ^ _ AnyDownTehtar _ {attached==false} ;
    AnyTengwa AnyUpTehta { attach{ to=@1; at=uap; with=dap }; insert=true; attached=true; }  / ^ _ AnyDownTehtar _ {attached==false} ;
    AnyUpTehta AnyUpTehta { attach{ to=@1; at=uap; with=dap }; insert=true; attached=true; }  /  _ ^ _ {attached==false} ;

    StemDownRightTengwar UnderbarTehta { attach{ to=@1; at=dap; with=luap }; insert=true; attached=true; } / ^ _ _ {attached==false} ;
    StemDownLeftTengwar UnderbarTehta { attach{ to=@1; at=dap; with=ruap }; insert=true; attached=true; } / ^ _ _ {attached==false} ;
    (AnyTengwa,AnyDownTehta) AnyDownTehta { attach{ to=@1; at=dap; with=uap }; insert=true; attached=true; } / ^ _ _ {attached==false} ;

  endpass;

  pass(2)
    Lambe (g_downutehta_long,g_longcarrtehta_lambe) { attach{ to=@1; at=cap; with=cap }; insert=true;} / _ g_underbar_lambe _ ;
    Alda (g_downutehta_long,g_underbar_lambe) { attach{ to=@1; at=cap; with=cap }; insert=true;} / _ _ ;

    (g_silme_flat,g_silme_lig_flat,g_aare_flat) AnyUpTehta { attach{ to=@1; at=uap; with=rdap }; insert=true;} / _ ^ AnyDownTehtar _ ;
    (g_roomen_open,g_roomen_conl_open,g_arda_open,g_arda_conl_open,g_silmenuq_flat,g_aarenuq_flat,AngWhtengwa) AnyDownTehta { attach{ to=@1; at=dap; with=luap }; insert=true;} / _ ^ _ ;
    (g_silme_open,g_silme_lig_open,g_aare_open,Hyarmen) AnyUpTehta { attach{ to=@1; at=uap; with=ldap }; insert=true;} / _ ^ AnyDownTehtar _ ;
    (g_silmenuq_open,g_aarenuq_open,Alda,Mhtengwa) AnyDownTehta { attach{ to=@1; at=dap; with=ruap }; insert=true;} / _ ^ _ ;

    g_underbar_roomen AnyDownTehta { attach{ to=@1; at=ldap; with=luap }; insert=true;} / _ _ ;
    if (silmepref==left)
//      g_overbar_silme AnyUpTehta { attach{ to=@2; at=ruap; with=rdap }; insert=true;} / (g_silme_flat,g_silme_lig_flat) _ _ ;
//      g_underbar_silme AnyDownTehta { attach{ to=@2; at=ldap; with=luap }; insert=true;} / (g_silmenuq_flat) _ _ ;
      g_overbar_silme AnyUpTehta { attach{ to=@1; at=ruap; with=rdap }; insert=true;} / _ _ ;
      g_underbar_silme AnyDownTehta { attach{ to=@1; at=ldap; with=luap }; insert=true;} /  _ _ ;
    elseif (silmepref==right)
//      g_overbar_silme AnyUpTehta { attach{ to=@2; at=luap; with=ldap }; insert=true;} / (g_silme_open,g_silme_lig_open) _ _ ;
//      g_underbar_silme AnyDownTehta { attach{ to=@2; at=rdap; with=ruap }; insert=true;} / (g_silmenuq_open) _ _ ;
      g_overbar_silme AnyUpTehta { attach{ to=@1; at=luap; with=ldap }; insert=true;} / _ _ ;
      g_underbar_silme AnyDownTehta { attach{ to=@1; at=rdap; with=ruap }; insert=true;} / _ _ ;
    endif;

  endpass;

  pass(3)
    (g_silme_lig,g_silme_lig_flat,g_silme_lig_open) (Calma,Quesse,Anga,Ungwe,Harma,Hwesta,Anca,Unque,Noldo,Nwalme,Anna,Vilya,Uure) {kern.x = +30m} / _ ^ AnyTehtar g_zwj _;
    (g_silme_lig,g_silme_lig_flat,g_silme_lig_open) (Roomen,Arda) {kern.x = -95m} / _ AnyTehtar g_zwj ^ _;
    (g_silme_lig,g_silme_lig_flat,g_silme_lig_open) (Lambe) {kern.x = -100m} / _ AnyTehtar g_zwj ^ _;
    (g_silme_lig,g_silme_lig_flat,g_silme_lig_open) (Silme) {kern.x = +20m} / _ AnyTehtar g_zwj ^ _;
    (Roomen,Arda) Hyarmen {kern.x = -80m} / _ AnyTehtar ^ _;
    (Roomen,Arda) Yanta {kern.x = -70m} / _ AnyTehtar ^ _;
    Hyarmen Roomen {kern.x = -70m} / _ AnyTehtar ^ _;
    Yanta Roomen {kern.x = -110m} / _ AnyTehtar ^ _;
  endpass;

endtable;
