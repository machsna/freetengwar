// Tengwar Telcontar - a Unicode Tengwar font
// Copyright (c) 2005-2022 Johan Winge
// 
// Tengwar Telcontar is free software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation, either version 3 of
// the License, or (at your option) any later version.
// 
// As a special exception, if you create a document which uses this font,
// and embed this font or unaltered portions of this font into the
// document, this font does not by itself cause the resulting document
// to be covered by the GNU General Public License. This exception does
// not however invalidate any other reasons why the document might be
// covered by the GNU General Public License. If you modify this font,
// you may extend this exception to your version of the font, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "stddef.gdh"
#define ps postscript
AutoPseudo=0; // ?
#include "latin.gdh"
#include "tengwar.gdh"
#include "underline.gdh"

table(glyph)
  c_latmayconr=(f,f_conl,g,t,     t_conl);
  c_latconr   =(f,f_conl,g,t_conr,t_conb);
  c_latmayconl=(f,     i,     dotlessi,     j,     dotlessj,     mletter,n,     p,     r,     t,     u,     v,     w,     y,     z);
  c_latconl   =(f_conl,i_conl,dotlessi_conl,j_conl,dotlessj_conl,m_conl, n_conl,p_conl,r_conl,t_conl,u_conl,v_conl,w_conl,y_conl,z_conl);

  c_lathighconr=(f,f_conl,longs,F);
  c_latmayhighconl=(b,     h,     k,     l);
  c_lathighconl   =(b_conl,h_conl,k_conl,l_conl);

  c_latmaydotligr=(f,       f_conl);
  c_latdotligr   =(f_dotlig,f_conl_dotlig);
  c_latmaydotligl=(i_conl,       j_conl);
  c_latdotligl   =(dotlessi_conl,dotlessj_conl);

  c_isoldiac=(gravecmb,acutecmb,circumflexcmb,tildecmb,macroncmb,dotaccentcmb,dieresiscmb,ringcmb,caroncmb,uni0364);
  c_diac=(gravecmb_normal,acutecmb_normal,circumflexcmb_normal,tildecmb_normal,macroncmb_normal,dotaccentcmb_normal,dieresiscmb_normal,ringcmb_normal,caroncmb_normal,uni0364_normal);
  c_diacbase=(dottedcircle,a,e,dotlessi,dotlessi_conl,dotlessj,dotlessj_conl,n,o,s,u,u_conl,y,y_conl,z,z_conl,A,E,I,N,O,S,U,Y,Z);

  c_avariant=(a,aacute,agrave,acircumflex,atilde,adieresis,aring);
  c_evariant=(e,eacute,egrave,ecircumflex,edieresis);

endtable;

table(feature)
  latconnect {
    id=101;
    name.LG_USENG = string("Connect Latin");
    default = true;
  }
  roundr {
    id=102;
    name.LG_USENG = string("Round r");
    default = no;
    settings {
      no { value=0; name.LG_USENG = string("Never"); }
      onlyo { value=1; name.LG_USENG = string("After o only"); }
      round { value=2; name.LG_USENG = string("After b, o, p"); }
      all { value=3; name.LG_USENG = string("Always"); }
    }
  }
endtable;

table(sub)
  pass(2)
    c_isoldiac > c_diac / c_diacbase _ ;
    if (roundr==onlyo)
      r > r_round / o _ ;
    elseif (roundr==round)
      r > r_round / (b,o,p) _ ;
    elseif (roundr==all)
      r > r_round ;
    endif;

    if (latconnect)
      c_latmayconr c_latmayconl > c_latconr c_latconl / _ ^ _ ;
    endif;
    c_latmayhighconl > c_lathighconl / c_lathighconr _ ;
  endpass;
  pass(3)
    c_latmaydotligr c_latmaydotligl > c_latdotligr c_latdotligl / _ _ ;
  endpass;
endtable;

table(pos)
  pass(1)
    c_diacbase (c_diac,dieresiscmb_narrow) { attach{ to=@1; at=uap; with=dap }; insert=false;} / _ ^ _;
  endpass;
  pass(2)
    c_avariant v  {kern.x = -110m} / _ c_diac? ^ _;
    c_avariant w  {kern.x = -110m} / _ c_diac? ^ _;
    (v,v_conl) c_avariant {kern.x = -100m} / _ ^ _;
    (w,w_conl) c_avariant {kern.x = -100m} / _ ^ _;
    (r,r_conl) c_avariant {kern.x = -60m} / _ ^ _;
    T c_evariant {kern.x = -160m} / _ ^ _;
    (quoteleft,quotedblleft) (a,c,d,e,g,o,q,s) {kern.x = -100m} / _ ^ _;
    (quoteright,quotedblright) (a,c,d,e,g,o,q,s) {kern.x = -200m} / _ ^ _;
    (a) (quoteright,quotedblright)  {kern.x = -50m} / _ ^ _;
    (f,f_conl) (quoteright,quotedblright) {kern.x = +450m} / _ ^ _;
  endpass;
endtable;

table(feature)
  tengconnect {
    id="201";
    name.LG_USENG = string("Connect tengwar");
    default = some;
    settings {
      none {
        value=0;
        name.LG_USENG = string("Minimal");
      }
      some {
        value=1;
        name.LG_USENG = string("Normal");
      }
      all {
        value=2;
        name.LG_USENG = string("Maximal");
      }
    }
  }
  silmepref {
    id="202";
    name.LG_USENG = string("Tehta on Silme");
    default = left;
    settings {
      left {
        value=0;
        name.LG_USENG = string("To the left");
      }
//      prefleft {
//        value=1;
//        name.LG_USENG = string("Prefer left");
//      }
//      prefright {
//        value=2;
//        name.LG_USENG = string("Prefer right");
//      }
      right {
        value=3;
        name.LG_USENG = string("To the right");
      }
    }
  }
  decteng {
    id="203";
    name.LG_USENG = string("Decorated tengwar");
    default = non;
    settings {
      non {
        value=0;
        name.LG_USENG = string("None");
      }
      init {
        value=1;
        name.LG_USENG = string("Word initially");
      }
      all {
        value=2;
        name.LG_USENG = string("All");
      }
    }
  }
  descwtengwa {
    id="204";
    name.LG_USENG = string("Descending W-tengwa");
    default = true;
  }
  lowershook {
    id="205";
    name.LG_USENG = string("Prefer low S-hook");
    default = true;
  }
  whtengwavar {
    id="206";
    name.LG_USENG = string("WH-tengwa variant");
    default = common;
    settings {
      common {
        value=0;
        name.LG_USENG = string("Common");
      }
      roomen {
        value=1;
        name.LG_USENG = string("Roomen nuquerna");
      }
      hyarmen {
        value=2;
        name.LG_USENG = string("Mirrored Hyarmen");
      }
    }
  }
  ossetail {
    id="207";
    name.LG_USENG = string("Marked Osse");
    default = none;
    settings {
      none {
        value=0;
        name.LG_USENG = string("Never");
      }
      final {
        value=1;
        name.LG_USENG = string("Word final");
      }
      all {
        value=2;
        name.LG_USENG = string("Always");
      }
    }
  }
  underline {
    id="208";
    name.LG_USENG = string("Underline");
    default = no;
    settings {
      no {
        value=0;
        name.LG_USENG = string("False");
      }
      yes {
        value=1;
        name.LG_USENG = string("True");
      }
    }
  }
// Alternative features with original numerical ids.
  tengconnectorig {
    id=201;
    name.LG_USENG = string("Connect tengwar (original)");
    default = some;
    settings {
      none {
        value=0;
        name.LG_USENG = string("Minimal");
      }
      some {
        value=1;
        name.LG_USENG = string("Normal");
      }
      all {
        value=2;
        name.LG_USENG = string("Maximal");
      }
    }
  }
  silmepreforig {
    id=202;
    name.LG_USENG = string("Tehta on Silme (original)");
    default = left;
    settings {
      left {
        value=0;
        name.LG_USENG = string("To the left");
      }
//      prefleft {
//        value=1;
//        name.LG_USENG = string("Prefer left");
//      }
//      prefright {
//        value=2;
//        name.LG_USENG = string("Prefer right");
//      }
      right {
        value=3;
        name.LG_USENG = string("To the right");
      }
    }
  }
  dectengorig {
    id=203;
    name.LG_USENG = string("Decorated tengwar (original)");
    default = non;
    settings {
      non {
        value=0;
        name.LG_USENG = string("None");
      }
      init {
        value=1;
        name.LG_USENG = string("Word initially");
      }
      all {
        value=2;
        name.LG_USENG = string("All");
      }
    }
  }
  descwtengwaorig {
    id=204;
    name.LG_USENG = string("Descending W-tengwa (original)");
    default = true;
  }
  lowershookorig {
    id=205;
    name.LG_USENG = string("Prefer low S-hook (original)");
    default = true;
  }
  whtengwavarorig {
    id=206;
    name.LG_USENG = string("WH-tengwa variant (original)");
    default = common;
    settings {
      common {
        value=0;
        name.LG_USENG = string("Common");
      }
      roomen {
        value=1;
        name.LG_USENG = string("Roomen nuquerna");
      }
      hyarmen {
        value=2;
        name.LG_USENG = string("Mirrored Hyarmen");
      }
    }
  }
  ossetailorig {
    id=207;
    name.LG_USENG = string("Marked Osse (original)");
    default = none;
    settings {
      none {
        value=0;
        name.LG_USENG = string("Never");
      }
      final {
        value=1;
        name.LG_USENG = string("Word final");
      }
      all {
        value=2;
        name.LG_USENG = string("Always");
      }
    }
  }
  underlineorig {
    id=208;
    name.LG_USENG = string("Underline (original)");
    default = no;
    settings {
      no {
        value=0;
        name.LG_USENG = string("False");
      }
      yes {
        value=1;
        name.LG_USENG = string("True");
      }
    }
  }

endtable;

table(glyph)
  Tinco=(tinco,tinco_conr,tinco_conl,tinco_conb,tinco_lig,TINCO);
  Parma=(parma,parma_conr,parma_conl,parma_conb,PARMA);
  Calma=(calma,calma_conr,CALMA);
  Quesse=(quesse,quesse_conr,quesse_conl,quesse_conb,QUESSE);
  Ando=(ando,ando_conr,ando_conl,ando_conb,ANDO);
  Umbar=(umbar,umbar_conr,umbar_conl,umbar_conb,UMBAR);
  Anga=(anga,anga_conr,ANGA);
  Ungwe=(ungwe,ungwe_conr,ungwe_conl,ungwe_conb,UNGWE);
  Thuule=(thuule,thuule_conr,THUULE);
  Formen=(formen,formen_conr,FORMEN);
  Harma=(harma,harma_conr,HARMA);
  Hwesta=(hwesta,hwesta_conr,hwesta_conl,hwesta_conb,HWESTA);
  Anto=(anto,anto_conr,ANTO);
  Ampa=(ampa,ampa_conr,AMPA);
  Anca=(anca,anca_conr,ANCA);
  Unque=(unque,unque_conr,unque_conl,unque_conb,UNQUE);
  Nuumen=(nuumen,nuumen_conr,nuumen_conl,nuumen_conb,NUUMEN);
  Malta=(malta,malta_conr,malta_conl,malta_conb,MALTA);
  Noldo=(noldo,noldo_conr,NOLDO,noldo_conrbot);
  Nwalme=(nwalme,nwalme_conr,nwalme_conl,nwalme_conb,NWALME,nwalme_conrbot,nwalme_conbbot);
  Oore=(oore,oore_conr,oore_conl,oore_conb,OORE);
  Vala=(vala,vala_conr,vala_conl,vala_conb,VALA);
  Anna=(anna,anna_conr,ANNA,anna_conrbot);
  Vilya=(vilya,vilya_conr,vilya_conl,vilya_conb,VILYA,vilya_conrbot,vilya_conbbot);
  ExtThuule=(extthuule,extthuule_conr,EXTTHUULE);
  ExtFormen=(extformen,extformen_conr,EXTFORMEN);
  ExtHarma=(extharma,EXTHARMA);
  ExtHwesta=(exthwesta,exthwesta_conl,EXTHWESTA);
  ExtAnto=(extanto,extanto_conr,EXTANTO);
  ExtAmpa=(extampa,extampa_conr,EXTAMPA);
  ExtAnca=(extanca,EXTANCA);
  ExtUnque=(extunque,extunque_conl,EXTUNQUE);
  Roomen=(roomen,roomen_conl,roomen_open,roomen_conl_open,roomen_lig,ROOMEN,ROOMEN_open);
  Arda=(arda,arda_conl,arda_open,arda_conl_open,ARDA,ARDA_open);
  Lambe=(lambe,lambe_conr,lambe_conl,lambe_conb,LAMBE,lambe_conrbot,lambe_conbbot);
  Alda=(alda,alda_conr,alda_conl,alda_conb,ALDA);
  Silme=(silme,silme_open,silme_flat,silme_lig,silme_lig_open,silme_lig_flat,silme_lig_harma,SILME,SILME_open,SILME_flat);
  SilmeNuq=(silmenuq,SILMENUQ);
  Aare=(aare,aare_open,aare_flat,AARE,AARE_open,AARE_flat);
  AareNuq=(aarenuq,AARENUQ);
  Hyarmen=(hyarmen,hyarmen_conr,HYARMEN);
  HwestaSin=(hwestasin);
  Yanta=(yanta,yanta_conr,YANTA);
  Uure=(uure,uure_conr);
  LongCarr=(longcarr,longcarr_conl,LONGCARR);
  Halla=(halla,HALLA);
  ShortCarr=(shortcarr,shortcarr_conr,shortcarr_conl,shortcarr_conb,SHORTCARR);
  MirroredOsse=(mirroredosse);
  Wtengwa=(wtengwa,wtengwa_desc);
  Atengwa=(atengwa,ATENGWA,atengwa_desc);
  ConnCarr=(conncarr,conncarr_long,conncarr_conr);
  Whtengwa=(whtengwa,whtengwa_var1,whtengwa_var2);
  OpenAnna=(openanna,openanna_conl,OPENANNA);
  PreFeaQu=(prefeanoreanqu,prefeanoreanqu_var);
  Mhtengwa=(mhtengwa,MHTENGWA);
  BeleriandicMh=(beleriandicmh,BELERIANDICMH);
  AngWhtengwa=(angwhtengwa);
  Vaiya=(vaiya);
  SHook=(sarince,sarince_high);

  LargeInterp=(tenginterrog,tengexlam,tengparen);

  Notdectengwar=(tinco,parma,calma,quesse,ando,umbar,anga,ungwe,
                 thuule,formen,harma,hwesta,anto,ampa,anca,unque,
                 nuumen,malta,noldo,nwalme,oore,vala,anna,vilya,
                 extthuule,extformen,extharma,exthwesta,extanto,extampa,extanca,extunque,
                 lambe,alda,roomen,arda,silme,silmenuq,aare,aarenuq,
                 hyarmen,yanta,longcarr,halla,shortcarr,
                 atengwa,openanna,mhtengwa,beleriandicmh);
  dectengwar=   (TINCO,PARMA,CALMA,QUESSE,ANDO,UMBAR,ANGA,UNGWE,
                 THUULE,FORMEN,HARMA,HWESTA,ANTO,AMPA,ANCA,UNQUE,
                 NUUMEN,MALTA,NOLDO,NWALME,OORE,VALA,ANNA,VILYA,
                 EXTTHUULE,EXTFORMEN,EXTHARMA,EXTHWESTA,EXTANTO,EXTAMPA,EXTANCA,EXTUNQUE,
                 LAMBE,ALDA,ROOMEN,ARDA,SILME,SILMENUQ,AARE,AARENUQ,
                 HYARMEN,YANTA,LONGCARR,HALLA,SHORTCARR,
                 ATENGWA,OPENANNA,MHTENGWA,BELERIANDICMH);

  WideTengwar=(Ando,Umbar,Anga,Ungwe,Anto,Ampa,Anca,Unque,Nuumen,Malta,Noldo,Nwalme,ExtAnto,ExtAmpa,ExtAnca,ExtUnque,Mhtengwa);
  StemUpRightTengwar=(Harma,Hwesta,Anca,Unque,ExtHarma,ExtHwesta,ExtAnca,ExtUnque,silme_flat,silme_lig_flat,aare_flat,HwestaSin);
  StemUpLeftTengwar=(Thuule,Formen,Anto,Ampa,ExtThuule,ExtFormen,ExtAnto,ExtAmpa,silme_open,silme_lig_open,aare_open,Hyarmen,AngWhtengwa,tinco_lig,LargeInterp,LongCarr,Halla,ShortCarr);
  StemDownRightTengwar=(Calma,Quesse,Anga,Ungwe,ExtHarma,ExtHwesta,ExtAnca,ExtUnque,silmenuq,aarenuq);
  StemDownLeftTengwar=(Tinco,Parma,Ando,Umbar,ExtThuule,ExtFormen,ExtAnto,ExtAmpa,Roomen,Arda,AngWhtengwa);
  NarrowTengwar=(LongCarr,Halla,ShortCarr,ConnCarr,Atengwa,MirroredOsse);

  AnyTengwa=(Tinco,Parma,Calma,Quesse,Ando,Umbar,Anga,Ungwe,Thuule,Formen,Harma,Hwesta,
             Anto,Ampa,Anca,Unque,Nuumen,Malta,Noldo,Nwalme,Oore,Vala,Anna,Vilya,
             ExtThuule,ExtFormen,ExtHarma,ExtHwesta,ExtAnto,ExtAmpa,ExtAnca,ExtUnque,
             Roomen,Arda,Lambe,Alda,Silme,SilmeNuq,Aare,AareNuq,Hyarmen,HwestaSin,Yanta,Uure,LongCarr,Halla,ShortCarr,
             MirroredOsse,Wtengwa,Atengwa,ConnCarr,Whtengwa,OpenAnna,PreFeaQu,Mhtengwa,BeleriandicMh,AngWhtengwa,Vaiya,SHook,
             dottedcircle);

  SomeMayConR=(calma,quesse,quesse_conl,anga,ungwe,ungwe_conl,noldo,nwalme,nwalme_conl,anna,vilya,vilya_conl,conncarr);
  SomeDoConR=(calma_conr,quesse_conr,quesse_conb,anga_conr,ungwe_conr,ungwe_conb,noldo_conr,nwalme_conr,nwalme_conb,anna_conr,vilya_conr,vilya_conb,conncarr_conr);
  MayConR=(SomeMayConR,lambe,lambe_conl,alda,alda_conl,uure);
  DoConR=(SomeDoConR,lambe_conr,lambe_conb,alda_conr,alda_conb,uure_conr);

  SomeMayConL=(tinco,parma,ando,umbar,nuumen,malta,oore,vala,roomen,arda,lambe,alda,shortcarr,longcarr,openanna,sarince);
  SomeDoConL=(tinco_conl,parma_conl,ando_conl,umbar_conl,nuumen_conl,malta_conl,oore_conl,vala_conl,roomen_conl,arda_conl,lambe_conl,alda_conl,shortcarr_conl,longcarr_conl,openanna_conl,sarince_high);
  MayConL=(SomeMayConL,quesse,ungwe,hwesta,unque,nwalme,vilya,exthwesta,extunque);
  DoConL=(SomeDoConL,quesse_conl,ungwe_conl,hwesta_conl,unque_conl,nwalme_conl,vilya_conl,exthwesta_conl,extunque_conl);

  MayConRLow=(tinco,tinco_conl,ando,ando_conl,umbar,umbar_conl,parma,parma_conl,thuule,formen,harma,hwesta,hwesta_conl,anto,ampa,anca,unque,unque_conl,nuumen,nuumen_conl,malta,malta_conl,noldo,nwalme,nwalme_conl,oore,oore_conl,vala,vala_conl,anna,vilya,vilya_conl,shortcarr,shortcarr_conl,lambe,lambe_conl,hyarmen,yanta,extthuule,extformen,extanto,extampa);
  DoConRLow=(tinco_conr,tinco_conb,ando_conr,ando_conb,umbar_conr,umbar_conb,parma_conr,parma_conb,thuule_conr,formen_conr,harma_conr,hwesta_conr,hwesta_conb,anto_conr,ampa_conr,anca_conr,unque_conr,unque_conr,nuumen_conr,nuumen_conb,malta_conr,malta_conb,noldo_conrbot,nwalme_conrbot,nwalme_conbbot,oore_conr,oore_conb,vala_conr,vala_conb,anna_conrbot,vilya_conrbot,vilya_conbbot,shortcarr_conr,shortcarr_conb,lambe_conrbot,lambe_conbbot,hyarmen_conr,yanta_conr,extthuule_conr,extformen_conr,extanto_conr,extampa_conr);
  MayConLLow=(sarince); DoConLLow=(sarince);

  IsolUpTehtar=(atehta,ytehta,itehta,etehta,otehta,utehta,overbar,wtehta,engytehta,revetehta,yantatehta,invatehta);
  IsolCentralTehtar=(dotinside);
  IsolDownTehtar=(downatehta,downytehta,downitehta,downetehta,dblunderstroke,downotehta,downutehta,underbar,longcarr_tehta,sarincetehta,thinnas);
  IsolTehtar=(IsolUpTehtar,IsolCentralTehtar,IsolDownTehtar);

  CombUpTehtar=(atehta_norm,ytehta_norm,itehta_norm,etehta_norm,otehta_norm,utehta_norm,overbar_norm,wtehta_norm,engytehta_norm,revetehta_norm,yantatehta_norm,invatehta_norm);
  CombCentralTehtar=(dotinside_norm);
  CombDownTehtar=(downatehta_norm,downytehta_norm,downitehta_norm,downetehta_norm,dblunderstroke_norm,downotehta_norm,downutehta_norm,underbar_norm,longcarr_lig,sarincetehta_norm,thinnas_norm);
  CombTehtar=(CombUpTehtar,CombCentralTehtar,CombDownTehtar);

  VarUpTehtar=(eetehta_norm,otehta_wide,otehta_narrow,ootehta_norm,ootehta_wide,ootehta_narrow,uutehta_norm,overbar_wide,overbar_lambe,overbar_silme,wtehta_wide,wtehta_narrow,engytehta_wide,otehtadot_norm,utehtadot_norm);
  VarCentralTehtar=(dotinside_conu,dotinside_cond);
  VarDownTehtar=(downeetehta_norm,downutehta_wide,downutehta_narrow,downutehta_long,underbar_wide,underbar_roomen,underbar_silme,underbar_lambe,longcarr_lig_lambe);
  VarTehtar=(VarUpTehtar,VarCentralTehtar,VarDownTehtar);

  AnyUpTehta=(CombUpTehtar,VarUpTehtar);
  AnyCentralTehta=(CombCentralTehtar,VarCentralTehtar);
  AnyDownTehta=(CombDownTehtar,VarDownTehtar);
  AnyTehta=(CombTehtar,AnyCentralTehta,VarTehtar);

  OverbarTehta=(overbar_norm,overbar_wide,overbar_lambe,overbar_silme);
  UnderbarTehta=(underbar_norm,underbar_wide,underbar_roomen,underbar_silme,underbar_lambe);

  ZWNJ=zwnj_hidden;
  ZWJ=zwj_hidden;
  //ZWJ=zwj;
  //ZWNJ=zwnj;

//  LatinVowels = (a,i,e,o,u);
//  LatinTehtar = (atehta,itehta,etehta,otehta,utehta);
//  LatinConsonants = (b,c,d,f,g,h,j,k,l,m,n,p,q,r,s,t,v,w,x,z);

  Underlinees=(tinco, tinco_conr,tinco_conl,tinco_conb, ando,  ando_conr,ando_conl,ando_conb, thuule,thuule_conr, anto,  anto_conr, oore,  oore_conr,oore_conl,oore_conb, nuumen,nuumen_conr,nuumen_conl,nuumen_conb, extthuule,extthuule_conr, extanto,extanto_conr);
  Underliners=(uline0,uline0,    uline0,    uline0,     uline1,uline1,   uline1,   uline1,    uline2,uline2,      uline3,uline3,    uline4,uline4,   uline4,   uline4,    uline5,uline5,     uline5,     uline5,      uline6,   uline6,         uline7, uline7);
  Underlinees+=(parma, parma_conr,parma_conl,parma_conb, umbar, umbar_conr,umbar_conl,umbar_conb, formen,formen_conr, ampa,  ampa_conr, vala,  vala_conr,vala_conl,vala_conb, malta, malta_conr,malta_conl,malta_conb, extformen,extformen_conr, extampa,extampa_conr);
  Underliners+=(uline0,uline0,    uline0,    uline0,     uline1,uline1,    uline1,    uline1,     uline2,uline2,      uline3,uline3,    uline4,uline4,   uline4,   uline4,    uline5,uline5,    uline5,    uline5,     uline6,   uline6,         uline7, uline7);
  Underlinees+=(calma,  calma_conr, anga,   anga_conr, harma, harma_conr, anca,  anca_conr, anna,  anna_conr,anna_conrbot, noldo, noldo_conr,noldo_conrbot, extharma, extanca);
  Underliners+=(uline22,uline22,    uline23,uline23,   uline2,uline2,     uline3,uline3,    uline2,uline2,   uline2,       uline3,uline3,    uline3,        uline22,  uline23);
  Underlinees+=(quesse, quesse_conr,quesse_conl,quesse_conb, ungwe,  ungwe_conr,ungwe_conl,ungwe_conb, hwesta,hwesta_conr,hwesta_conl,hwesta_conb, unque, unque_conr,unque_conl,unque_conb, vilya, vilya_conr,vilya_conl,vilya_conb,vilya_conrbot,vilya_conbbot,nwalme,nwalme_conr,nwalme_conl,nwalme_conb,nwalme_conrbot,nwalme_conbbot, exthwesta,exthwesta_conl, extunque,extunque_conl);
  Underliners+=(uline22,uline22,    uline22,    uline22,     uline23,uline23,   uline23,   uline23,    uline2,uline2,     uline2,     uline2,      uline3,uline3,    uline3,    uline3,     uline2,uline2,    uline2,    uline2,    uline2,       uline2,       uline3,uline3,     uline3,     uline3,     uline3,        uline3,         uline22,  uline22,        uline23, uline23);
  Underlinees+=(roomen, roomen_conl,roomen_open,roomen_conl_open, arda,   arda_conl,arda_open,arda_conl_open,lambe,  lambe_conr,lambe_conl,lambe_conb,lambe_conrbot,lambe_conbbot,alda,   alda_conr,alda_conl,alda_conb);
  Underliners+=(uline32,uline32,    uline33,    uline33,          uline32,uline32,  uline33,  uline33,       uline34,uline34,   uline34,   uline34,   uline34,      uline34,      uline35,uline35,  uline35,  uline35);
  Underlinees+=(silme,  silme_open,silme_flat,silme_lig,silme_lig_open,silme_lig_flat,silme_lig_harma,silmenuq,aare,   aare_open,aare_flat,aarenuq,hyarmen,hyarmen_conr,hwestasin,yanta,  yanta_conr,uure,   uure_conr,longcarr,longcarr_conl,halla,  shortcarr,shortcarr_conr,shortcarr_conl,shortcarr_conb);
  Underliners+=(uline36,uline36,   uline36,   uline37,  uline37,       uline37,       uline37,        uline38, uline39,uline39,  uline39,  uline40,uline41,uline42,     uline43,  uline41,uline45,   uline46,uline47,  uline48, uline48,      uline49,uline49,  uline49,       uline49,       uline49   );
  Underlinees+=(mirroredosse,wtengwa,atengwa_desc,wtengwa_desc,atengwa,conncarr,conncarr_long,conncarr_conr,openanna,openanna_conl,prefeanoreanqu,whtengwa,whtengwa_var1,whtengwa_var2,mhtengwa,beleriandicmh,angwhtengwa,vaiya,  sarince,  sarince_high);
  Underliners+=(uline50,     uline50,uline50,     uline51,     uline52,uline53, uline53,      uline53,      uline54, uline54,      uline55,       uline56, uline57,        uline58,        uline59, uline60,      uline61,    uline62,uline63,uline64);
  Underlinees+=(TINCO,PARMA,EXTTHUULE,EXTFORMEN,ANDO,EXTANTO,AMPA,MALTA,THUULE,OORE,FORMEN,VALA,ANTO,NUUMEN,NWALME,UMBAR,EXTAMPA,CALMA,EXTHARMA,QUESSE,EXTHWESTA);
  Underliners+=(uline65,  uline65,  uline65,      uline65,      uline66, uline66,    uline68, uline68,  uline67,   uline67, uline67,   uline67, uline68, uline68,   uline68,   uline69,  uline69,    uline70,  uline70,     uline70,   uline70);
  Underlinees+=(ANGA,UNGWE,EXTUNQUE,HARMA,ANNA,HWESTA,VILYA,ANCA,NOLDO,EXTANCA,UNQUE,LONGCARR,HALLA,SHORTCARR,OPENANNA,HYARMEN,YANTA,LAMBE,ALDA,ATENGWA,MHTENGWA,BELERIANDICMH);
  Underliners+=(uline71, uline71,  uline71,     uline72,  uline72, uline72,   uline72,  uline73, uline73,  uline71,    uline73,  uline74,     uline75,  uline75,      uline76,     uline77,    uline77,  uline78,  uline79, uline57,    uline80,     uline81);
endtable;

// We will deal with at most 4 tehtar. Change if the need arises.
// This is very demanding, I'm afraid, both memory and time wise; hence the restriction.
#define AnyIsolTehtar [[[[IsolTehtar]?IsolTehtar]?IsolTehtar]?IsolTehtar]?
#define AnyIsolUpTehtar [[[IsolUpTehtar]?IsolUpTehtar]?IsolUpTehtar]?
// If there is at least one uptehta, there can be only 2 downtehtar:
#define AnyIsolDownTehtar [[IsolDownTehtar]?IsolDownTehtar]?

#define AnyTehtar [[[AnyTehta]?AnyTehta]?AnyTehta]?
#define AnyDownTehtar [[AnyDownTehta]?AnyDownTehta]?

#define decadjusted user1

table(sub)

  pass(1)
    if (decteng==all || dectengorig==all || decteng==init || dectengorig==init)
      Notdectengwar > dectengwar / ^ _ {decadjusted==false};
    endif;
    if (decteng==init || dectengorig==init)
      dectengwar > Notdectengwar {decadjusted=true} / (AnyTengwa,IsolTehtar) ZWJ? ^ _ ;
    endif;
    if (ossetail==all || ossetailorig==all || ossetail==final || ossetailorig==final)
      atengwa > atengwa_desc / ^ _ ;
    endif;

    zwj longcarr > _ longcarr_tehta:(1 2);
    zwj > zwj_hidden;
    zwnj > zwnj_hidden;

  endpass;

  pass(2)

  // First rules that affect tengwar:

    (harma,hwesta,hwesta_conl) tinco > (extharma,exthwesta,exthwesta_conl) tinco_lig / ^ _ AnyIsolTehtar ZWJ _ ;
    silme > silme_lig_harma / ^ _ ZWJ Harma ;
    silme > silme_lig / ^ _ AnyIsolTehtar ZWJ AnyTengwa ;
    (calma,quesse,anga,ungwe) roomen > (calma_conr,quesse_conr,anga_conr,ungwe_conr) roomen_lig / ^ _ AnyIsolTehtar ZWJ _ ;

    if (lowershook && lowershookorig)
      MayConRLow MayConLLow > DoConRLow DoConLLow / ^ _ AnyIsolTehtar ZWJ? _ ;
    endif;
    MayConR MayConL > DoConR DoConL / ^ _ AnyIsolTehtar ZWJ _ ;
    if (tengconnect==all || tengconnectorig==all)
      MayConR MayConL > DoConR DoConL / ^ _ AnyIsolTehtar _ ;
    elseif (tengconnect==some && tengconnectorig==some)
      SomeMayConR SomeMayConL > SomeDoConR SomeDoConL / ^ _ AnyIsolTehtar  _ ;
    endif;
    MayConR (sarince) > DoConR (sarince_high) / ^ _ AnyIsolTehtar _ ;
    sarince > sarince_roomen / (roomen,arda) AnyIsolTehtar ZWJ? ^ _ ;
    conncarr MayConL > conncarr_conr DoConL / ^ _ AnyIsolTehtar _ ;
    conncarr > conncarr_long / ^ _ AnyIsolTehtar ZWJ? (Calma,Anga,Harma,Anca,Noldo,Anna,ExtHarma,ExtAnca,Hyarmen,whtengwa);
    if (!lowershook || !lowershookorig)
      MayConRLow MayConLLow > DoConRLow DoConLLow / ^ _ AnyIsolTehtar ZWJ? _ ;
    endif;

    (roomen,roomen_conl,ROOMEN,arda,arda_conl,ARDA) > (roomen_open,roomen_conl_open,ROOMEN_open,arda_open,arda_conl_open,ARDA_open)
           / _ AnyIsolUpTehtar IsolDownTehtar ;
    if (silmepref==left && silmepreforig==left)
      (silme,silme_lig,SILME,aare,AARE) > (silme_flat,silme_lig_flat,SILME_flat,aare_flat,AARE_flat) / ^ _ AnyIsolDownTehtar IsolUpTehtar ;
    elseif (silmepref==right || silmepreforig==right)
      (silme,silme_lig,SILME,aare,AARE) > (silme_open,silme_lig_open,SILME_open,aare_open,AARE_open) / ^ _ AnyIsolDownTehtar IsolUpTehtar ;
    endif;
    if (descwtengwa && descwtengwaorig)
      wtengwa > wtengwa_desc;
    endif;
    if (whtengwavar==roomen || whtengwavarorig==roomen)
       whtengwa > whtengwa_var1;
    elseif (whtengwavar==hyarmen || whtengwavarorig==hyarmen)
       whtengwa > whtengwa_var2;
    endif;
    if (ossetail==final || ossetailorig==final)
       atengwa_desc > atengwa / ^ _ AnyIsolUpTehtar ZWJ? AnyTengwa;
    endif;


  // When none of the above rules match anymore, we proceed to the next character, possibly a tehta:

    // Change "isolated" forms (i.e. on a dotted circle) to non-spacing forms:
    IsolTehtar > CombTehtar / AnyTengwa ^ AnyTehtar _ ;

    // Sort the tehtar. This simplifies things further on.
//    AnyUpTehta AnyUpTehta AnyUpTehta AnyUpTehta AnyUpTehta AnyDownTehta > @6 @1 @2 @3 @4 @5 / ^ _ _ _ _ _ _ ;
//    AnyUpTehta AnyUpTehta AnyUpTehta AnyUpTehta AnyDownTehta > @5 @1 @2 @3 @4 / ^ _ _ _ _ _ ;
    AnyUpTehta AnyUpTehta AnyUpTehta AnyDownTehta > @4 @1 @2 @3 / ^ _ _ _ _ ;
    AnyUpTehta AnyUpTehta AnyDownTehta > @3 @1 @2 / ^ _ _ _ ;
    AnyUpTehta AnyDownTehta > @2 @1 / ^ _ _ ;

    (underbar_norm) > underbar_roomen / Roomen _ ;
    (underbar_norm) > underbar_silme / (SilmeNuq,AareNuq) _ ;
    (overbar_norm) > overbar_silme / (Silme,Aare) AnyDownTehtar _ ;
    (overbar_norm,underbar_norm,otehta_norm,wtehta_norm,engytehta_norm) > (overbar_wide,underbar_wide,otehta_wide,wtehta_wide,engytehta_wide)
           / WideTengwar ^ AnyTehtar _ ;
    otehta_norm > otehta_wide / (Tinco,Parma,Thuule,Formen,Oore,Vala,ExtThuule,ExtFormen,OpenAnna,BeleriandicMh) ^ AnyTehtar _ ;
    (otehta_norm,overbar_norm,underbar_norm,engytehta_norm) > (otehta_wide,overbar_lambe,underbar_lambe,engytehta_wide)
           / (Lambe,Alda) ^ AnyTehtar _ ;
    longcarr_lig > longcarr_lig_lambe / Lambe underbar_lambe? ^ _ ;
    (downutehta_norm) > (downutehta_long) / (Roomen,Arda,Lambe,Alda,AngWhtengwa) UnderbarTehta? _ ;
    (downutehta_norm) > (downutehta_narrow) / (Tinco,Parma,ExtThuule,ExtFormen) UnderbarTehta? _ ;
    (downutehta_norm) > (downutehta_wide) / WideTengwar UnderbarTehta? _ ;
    wtehta_norm > wtehta_narrow / (StemUpRightTengwar,StemUpLeftTengwar,NarrowTengwar) AnyTehtar _ ;
    (otehta_norm,ootehta_norm) > (otehta_narrow,ootehta_narrow)
           / NarrowTengwar AnyTehtar ^ _ AnyTehtar StemUpLeftTengwar;
    (otehta_norm,ootehta_norm) > (otehta_narrow,ootehta_narrow) / StemUpRightTengwar AnyTehtar _ ;
 
    itehta_norm itehta_norm > ytehta_norm:(1 2) _ / ^ _ _ ;
    etehta_norm etehta_norm > eetehta_norm:(1 2) _ / ^ _ _ ;
    downetehta_norm downetehta_norm > downeetehta_norm:(1 2) _ / ^ _ _ ;
    otehta_narrow otehta_narrow > ootehta_narrow:(1 2) _ / ^ _ _ ;
    otehta_norm otehta_norm > ootehta_norm:(1 2) _ / ^ _ _ ;
    otehta_wide otehta_wide > ootehta_wide:(1 2) _ / ^ _ _ ;
    utehta_norm utehta_norm > uutehta_norm:(1 2) _ / ^ _ _ ;

    itehta_norm utehta_norm > utehtadot_norm:(1 2) _ / ^ _ _ ;
    utehta_norm itehta_norm > utehtadot_norm:(1 2) _ / ^ _ _ ;
    itehta_norm (otehta_narrow,otehta_norm,otehta_wide) > otehtadot_norm :(1 2)_ / ^ _ _ ;
    (otehta_narrow,otehta_norm,otehta_wide) itehta_norm > otehtadot_norm:(1 2) _ / ^ _ _ ;

    dotinside_norm > dotinside_conu / (Quesse,Ungwe,Hwesta,Unque,Nwalme,Vilya,ExtHwesta,ExtUnque) ^ _ ;
    dotinside_norm > dotinside_cond / (Parma,Umbar,Formen,Ampa,Malta,Vala,ExtFormen,ExtAmpa,PreFeaQu,BeleriandicMh) ^ _ ;

  endpass;

  pass(3)
    if (underline==yes || underlineorig==yes)
       uline_end Underlinees _ > Underliners$2:2 @2 uline_end:2 / _ _ AnyTehtar ZWJ? ^ _ ;
       _ _ Underlinees _ > uline_start:3 Underliners$3:3 @3 uline_end:3 / _ _ _ AnyTehtar ZWJ? ^ _ ;
    endif;
  endpass;

endtable;

#define attached user2

table(pos)

  pass(1)

    if (underline==yes || underlineorig==yes)
      uline_start { attach{ to=@2; at=point(0m,0m); with=point(0m,0m) }; } Underliners  / _ ^ _;
      Underliners { attach{ to=@2; at=point(0m,0m); with=point(0m,0m) }; } Underlinees  / _ ^ _;
    endif;

    Lambe underbar_lambe { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } AnyDownTehta { attach{ to=@2; at=dap; with=uap }; insert=true; attached=true; } AnyDownTehta { attach{ to=@1; at=dap; with=uap }; insert=true; attached=true; } / ^ _ _ _ _ {attached==false} ;
    Lambe underbar_lambe { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } AnyDownTehta { attach{ to=@2; at=dap; with=uap }; insert=true; attached=true; } / ^ _ _ _ {attached==false} ;
    Lambe AnyDownTehta { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } AnyDownTehta { attach{ to=@1; at=dap; with=uap }; insert=true; attached=true; } / ^ _ _ _ {attached==false} ;
    Lambe AnyDownTehta { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } / ^ _ _  {attached==false} ;
    Alda underbar_lambe { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } AnyDownTehta { attach{ to=@1; at=dap; with=ruap }; insert=true; attached=true; } / ^ _ _ _ {attached==false} ;
    Alda underbar_lambe { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } / ^ _ _ {attached==false} ;

    AnyTengwa AnyCentralTehta { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; }  /  _ ^ _ {attached==false} ;

    StemUpRightTengwar OverbarTehta { attach{ to=@1; at=uap; with=ldap }; insert=true; attached=true; }  / ^ _ AnyDownTehtar _ {attached==false} ;
    StemUpLeftTengwar OverbarTehta { attach{ to=@1; at=uap; with=rdap }; insert=true; attached=true; }  / ^ _ AnyDownTehtar _ {attached==false} ;
    AnyTengwa AnyUpTehta { attach{ to=@1; at=uap; with=dap }; insert=true; attached=true; }  / ^ _ AnyCentralTehta? AnyDownTehtar _ {attached==false} ;
    AnyUpTehta AnyUpTehta { attach{ to=@1; at=uap; with=dap }; insert=true; attached=true; }  /  _ ^ _ {attached==false} ;

    StemDownRightTengwar UnderbarTehta { attach{ to=@1; at=dap; with=luap }; insert=true; attached=true; } / ^ _ _ {attached==false} ;
    StemDownLeftTengwar UnderbarTehta { attach{ to=@1; at=dap; with=ruap }; insert=true; attached=true; } / ^ _ _ {attached==false} ;
    AnyTengwa AnyDownTehta { attach{ to=@1; at=dap; with=uap }; insert=true; attached=true; } / ^ _ AnyCentralTehta? _ {attached==false} ;
    AnyDownTehta AnyDownTehta { attach{ to=@1; at=dap; with=uap }; insert=true; attached=true; } / ^ _ _ {attached==false} ;

  endpass;

  pass(2)
    Lambe (downutehta_long,longcarr_lig_lambe) { attach{ to=@1; at=cap; with=cap }; insert=true;} / _ underbar_lambe _ ;
    Alda (downutehta_long,underbar_lambe) { attach{ to=@1; at=cap; with=cap }; insert=true;} / _ _ ;

    (silme_flat,silme_lig_flat,aare_flat) AnyUpTehta { attach{ to=@1; at=uap; with=rdap }; insert=true;} / _ ^ AnyDownTehtar _ ;
    (roomen_open,roomen_conl_open,arda_open,arda_conl_open,AngWhtengwa,downutehta_long) AnyDownTehta { attach{ to=@1; at=dap; with=luap }; insert=true;} / _ ^ _ ;
    (silme_open,silme_lig_open,aare_open,Hyarmen) AnyUpTehta { attach{ to=@1; at=uap; with=ldap }; insert=true;} / _ ^ AnyDownTehtar _ ;
    (silmenuq,aarenuq,Alda,Mhtengwa) AnyDownTehta { attach{ to=@1; at=dap; with=ruap }; insert=true;} / _ ^ _ ;

    underbar_roomen AnyDownTehta { attach{ to=@1; at=ldap; with=luap }; insert=true;} / _ _ ;
    if (silmepref==left && silmepreforig==left)
//      overbar_silme AnyUpTehta { attach{ to=@2; at=ruap; with=rdap }; insert=true;} / (silme_flat,silme_lig_flat) _ _ ;
//      underbar_silme AnyDownTehta { attach{ to=@2; at=ldap; with=luap }; insert=true;} / (silmenuq_flat) _ _ ;
      overbar_silme AnyUpTehta { attach{ to=@1; at=ruap; with=rdap }; insert=true;} / _ _ ;
      underbar_silme AnyDownTehta { attach{ to=@1; at=ldap; with=luap }; insert=true;} /  _ _ ;
    elseif (silmepref==right || silmepreforig==right)
//      overbar_silme AnyUpTehta { attach{ to=@2; at=luap; with=ldap }; insert=true;} / (silme_open,silme_lig_open) _ _ ;
//      underbar_silme AnyDownTehta { attach{ to=@2; at=rdap; with=ruap }; insert=true;} / (silmenuq_open) _ _ ;
      overbar_silme AnyUpTehta { attach{ to=@1; at=luap; with=ldap }; insert=true;} / _ _ ;
      underbar_silme AnyDownTehta { attach{ to=@1; at=rdap; with=ruap }; insert=true;} / _ _ ;
    endif;

  endpass;

  pass(3)
    (Calma,Anga,Harma,Anca,Noldo,Anna,Uure) {kern.x = +105m} / (silme_lig,silme_lig_flat,silme_lig_open) AnyTehtar ZWJ _;
    (Quesse,Ungwe,Hwesta,Unque,Nwalme,Vilya) {kern.x = +10m} / (silme_lig,silme_lig_flat,silme_lig_open) AnyTehtar ZWJ _;
    (Roomen,Arda) {kern.x = -50m} / (silme_lig,silme_lig_flat,silme_lig_open) AnyTehtar ZWJ _;
    (Lambe) {kern.x = -90m} / (silme_lig,silme_lig_flat,silme_lig_open) AnyTehtar ZWJ _;
    (Silme) {kern.x = +115m} / (silme_lig,silme_lig_flat,silme_lig_open) AnyTehtar ZWJ _;

    (Hyarmen,Yanta) {kern.x = -150m} / (Roomen,Arda) AnyTehtar _;
    Roomen {kern.x = -110m} / Hyarmen AnyTehtar _;
    Roomen {kern.x = -160m} / Yanta AnyTehtar _;
    (SilmeNuq,AareNuq,HwestaSin,Yanta,Uure,Atengwa,Vaiya) {kern.x = -135m} / conncarr AnyTehtar _;
    Aare {kern.x = -80m} / (Tinco,Ando,Thuule,Anto,Nuumen,Oore,ExtThuule,ExtAnto,Roomen,Arda,Silme,Uure,AngWhtengwa) AnyTehtar _;

    utehta_norm {shift.x = -125m} / (Roomen,Arda) AnyDownTehtar _;
    otehta_norm {shift.x = -120m} / (Roomen,Arda) AnyDownTehtar _;
    otehta_wide {shift.x = -190m} / (Tinco,Thuule,Oore,ExtThuule,BeleriandicMh) AnyDownTehtar _;
    otehta_wide {shift.x = -170m} / (Parma,Formen,Vala,ExtFormen,Unque,ExtUnque,OpenAnna) AnyDownTehtar _;
    otehta_wide {shift.x = -150m} / (Anga,Anca,Noldo,ExtAnca) AnyDownTehtar _;
    otehta_norm {shift.x = 120m} / (ShortCarr,LongCarr,Atengwa) AnyDownTehtar _;
    otehta_narrow {shift.x = -125m} / (Hwesta,ExtHwesta) _;
    utehta_norm {shift.x = -130m} / (Hwesta,ExtHwesta) _;
    wtehta_narrow {shift.x = -60m} / (Hwesta,ExtHwesta) _;
    atehta_norm {shift.x = 60m} / wtehta_norm _;
    sarincetehta_norm {shift.x = +85m} / Tinco _;
    sarincetehta_norm {shift.x = +320m} / Parma _;

    downotehta_norm {shift.x = -400m} / silme_lig_harma ZWJ Harma _;
    downotehta_norm {shift.x = +75m} / atengwa _;
    longcarr_lig {shift.x = 90m; shift.y = 350m} / downutehta_long _;
    downatehta_norm {shift.x = -150m} longcarr_lig {shift.x = 450m; shift.y = 460m};
    downitehta_norm {shift.y = 150m} / (Hyarmen,Yanta) _;
    itehta_norm {shift.x = -100m} / (silme_open,aare_open) _;

    (Tinco,Parma,Quesse,Ando,Umbar,Ungwe,Hwesta,Unque,Nuumen,Malta,Nwalme,Oore,Vala,Vilya,ExtHwesta,ExtUnque,Roomen,Arda,Lambe,Alda,silme,aare,Yanta,Mhtengwa,BeleriandicMh) {kern.x = -100m} / (startmodechange,quoteleft,quotedblleft) _ ;
    (Anga,Harma,SilmeNuq,AareNuq,HwestaSin,Uure,Wtengwa,Atengwa,PreFeaQu,Vaiya) {kern.x = -200m} / (startmodechange,quoteleft,quotedblleft) _ ;
    (Calma,Anca,Noldo,Anna,ExtHarma,ExtAnca) {kern.x = -300m} / (startmodechange,quoteleft,quotedblleft) _ ;
    (endmodechange,quoteright,quotedblright) {kern.x = -150m} / (Tinco,Ando,Thuule,Anto,ExtThuule,ExtAnto,Nuumen,Oore,Roomen,Arda,Silme,Uure,AngWhtengwa) AnyTehtar _ ;

  endpass;

endtable;
