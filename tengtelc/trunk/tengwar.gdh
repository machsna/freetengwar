// Tengwar Telcontar - a Tengwar unicode typeface.
// Copyright (C) 2005-2009 Johan Winge
// 
// Tengwar Telcontar is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of the
// License, or (at your option) any later version.
// 
// As a special exception, if you create a document which uses this
// font, and embed this font or unaltered portions of this font into
// the document, this font does not by itself cause the resulting
// document to be covered by the GNU General Public License. This
// exception does not however invalidate any other reasons why the
// document might be covered by the GNU General Public License. If you
// modify this font, you may extend this exception to your version of
// the font, but you are not obligated to do so. If you do not wish to
// do so, delete this exception statement from your version.
// 
// Tengwar Telcontar is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tengwar Telcontar; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

table(feature)
  tengconnect {
    id=201;
    name.LG_USENG = string("Connect tengwar");
    default = some;
    settings {
      none {
        value=0;
        name.LG_USENG = string("Only when necessary");
      }
      some {
        value=1;
        name.LG_USENG = string("Sometimes");
      }
      all {
        value=2;
        name.LG_USENG = string("Whenever possible");
      }
    }
  }
  silmepref {
    id=202;
    name.LG_USENG = string("Tehta on Silme");
    default = left;
    settings {
      left {
        value=0;
        name.LG_USENG = string("To the left");
      }
//      prefleft {
//        value=1;
//        name.LG_USENG = string("Prefer left");
//      }
//      prefright {
//        value=2;
//        name.LG_USENG = string("Prefer right");
//      }
      right {
        value=3;
        name.LG_USENG = string("To the right");
      }
    }
  }
  decteng {
    id=203;
    name.LG_USENG = string("Decorated tengwar");
    default = non;
    settings {
      non {
        value=0;
        name.LG_USENG = string("None");
      }
      init {
        value=1;
        name.LG_USENG = string("Word initially");
      }
      all {
        value=2;
        name.LG_USENG = string("All");
      }
    }
  }
  descwtengwa {
    id=204;
    name.LG_USENG = string("Descending W-tengwa");
    default = true;
  }
  lowershook {
    id=205;
    name.LG_USENG = string("Prefer low S-hook");
    default = true;
  }
  whtengwa {
    id=206;
    name.LG_USENG = string("WH-tengwa variant");
    default = common;
    settings {
      common {
        value=0;
        name.LG_USENG = string("Common");
      }
      roomen {
        value=1;
        name.LG_USENG = string("Roomen nuquerna");
      }
      hyarmen {
        value=2;
        name.LG_USENG = string("Mirrored Hyarmen");
      }
    }
  }
  ossetail {
    id=207;
    name.LG_USENG = string("Marked Osse");
    default = none;
    settings {
      none {
        value=0;
        name.LG_USENG = string("Never");
      }
      final {
        value=1;
        name.LG_USENG = string("Word final");
      }
      all {
        value=2;
        name.LG_USENG = string("Always");
      }
    }
  }
  underline {
    id=208;
    name.LG_USENG = string("Underline");
    default = no;
    settings {
      no {
        value=0;
        name.LG_USENG = string("No");
      }
      yes {
        value=1;
        name.LG_USENG = string("Yes");
      }
    }
  }

endtable;

table(glyph)
  Tinco=(g_tinco,g_tinco_conr,g_tinco_conl,g_tinco_conb,g_tinco_lig,g_tinco_dec);
  Parma=(g_parma,g_parma_conr,g_parma_conl,g_parma_conb,g_parma_dec);
  Calma=(g_calma,g_calma_conr,g_calma_dec);
  Quesse=(g_quesse,g_quesse_conr,g_quesse_conl,g_quesse_conb,g_quesse_dec);
  Ando=(g_ando,g_ando_conr,g_ando_conl,g_ando_conb,g_ando_dec);
  Umbar=(g_umbar,g_umbar_conr,g_umbar_conl,g_umbar_conb,g_umbar_dec);
  Anga=(g_anga,g_anga_conr,g_anga_dec);
  Ungwe=(g_ungwe,g_ungwe_conr,g_ungwe_conl,g_ungwe_conb,g_ungwe_dec);
  Thuule=(g_thuule,g_thuule_conr,g_thuule_dec);
  Formen=(g_formen,g_formen_conr,g_formen_dec);
  Harma=(g_harma,g_harma_conr,g_harma_dec);
  Hwesta=(g_hwesta,g_hwesta_conr,g_hwesta_conl,g_hwesta_conb,g_hwesta_dec);
  Anto=(g_anto,g_anto_conr,g_anto_dec);
  Ampa=(g_ampa,g_ampa_conr,g_ampa_dec);
  Anca=(g_anca,g_anca_conr,g_anca_dec);
  Unque=(g_unque,g_unque_conr,g_unque_conl,g_unque_conb,g_unque_dec);
  Nuumen=(g_nuumen,g_nuumen_conr,g_nuumen_conl,g_nuumen_conb,g_nuumen_dec);
  Malta=(g_malta,g_malta_conr,g_malta_conl,g_malta_conb,g_malta_dec);
  Noldo=(g_noldo,g_noldo_conr,g_noldo_dec,g_noldo_conrbot);
  Nwalme=(g_nwalme,g_nwalme_conr,g_nwalme_conl,g_nwalme_conb,g_nwalme_dec,g_nwalme_conrbot,g_nwalme_conbbot);
  Oore=(g_oore,g_oore_conr,g_oore_conl,g_oore_conb,g_oore_dec);
  Vala=(g_vala,g_vala_conr,g_vala_conl,g_vala_conb,g_vala_dec);
  Anna=(g_anna,g_anna_conr,g_anna_dec,g_anna_conrbot);
  Vilya=(g_vilya,g_vilya_conr,g_vilya_conl,g_vilya_conb,g_vilya_dec,g_vilya_conrbot,g_vilya_conbbot);
  ExtThuule=(g_extthuule,g_extthuule_conr,g_extthuule_dec);
  ExtFormen=(g_extformen,g_extformen_conr,g_extformen_dec);
  ExtHarma=(g_extharma,g_extharma_dec);
  ExtHwesta=(g_exthwesta,g_exthwesta_conl,g_exthwesta_dec);
  ExtAnto=(g_extanto,g_extanto_conr,g_extanto_dec);
  ExtAmpa=(g_extampa,g_extampa_conr,g_extampa_dec);
  ExtAnca=(g_extanca,g_extanca_dec);
  ExtUnque=(g_extunque,g_extunque_conl,g_extunque_dec);
  Roomen=(g_roomen,g_roomen_conl,g_roomen_open,g_roomen_conl_open);
  Arda=(g_arda,g_arda_conl,g_arda_open,g_arda_conl_open);
  Lambe=(g_lambe,g_lambe_conr,g_lambe_conl,g_lambe_conb,g_lambe_dec,g_lambe_conrbot,g_lambe_conbbot);
  Alda=(g_alda,g_alda_conr,g_alda_conl,g_alda_conb,g_alda_dec);
  Silme=(g_silme,g_silme_open,g_silme_flat,g_silme_lig,g_silme_lig_open,g_silme_lig_flat,g_silme_lig_harma);
  SilmeNuq=(g_silmenuq);
  Aare=(g_aare,g_aare_open,g_aare_flat);
  AareNuq=(g_aarenuq);
  Hyarmen=(g_hyarmen,g_hyarmen_conr,g_hyarmen_dec);
  HwestaSin=(g_hwestasin);
  Yanta=(g_yanta,g_yanta_conr,g_yanta_dec);
  Uure=(g_uure,g_uure_conr);
  LongCarr=(g_longcarr,g_longcarr_conl,g_longcarr_dec);
  Halla=(g_halla,g_halla_dec);
  ShortCarr=(g_shortcarr,g_shortcarr_conr,g_shortcarr_conl,g_shortcarr_conb,g_shortcarr_dec);
  MirroredOsse=(g_mirroredosse);
  Wtengwa=(g_wtengwa,g_wtengwa_desc);
  Atengwa=(g_atengwa,g_atengwa_dec,g_atengwa_desc);
  ConnCarr=(g_conncarr,g_conncarr_long,g_conncarr_conr);
  Whtengwa=(g_whtengwa,g_whtengwa_varone,g_whtengwa_vartwo);
  OpenAnna=(g_openanna,g_openanna_conl,g_openanna_dec);
  PreFeaQu=(g_prefeanoreanqu,g_prefeanoreanqu_var);
  Mhtengwa=(g_mhtengwa,g_mhtengwa_dec);
  BeleriandicMh=(g_beleriandicmh,g_beleriandicmh_dec);
  AngWhtengwa=(g_angwhtengwa);
  Vaiya=(g_vaiya);
  SHook=(g_shook,g_shook_high);

  LargeInterp=(g_tenginterrog,g_tengexlam,g_tengparen);

  Notdectengwar=(g_tinco,g_parma,g_calma,g_quesse,g_ando,g_umbar,g_anga,g_ungwe,
                 g_thuule,g_formen,g_harma,g_hwesta,g_anto,g_ampa,g_anca,g_unque,
                 g_nuumen,g_malta,g_noldo,g_nwalme,g_oore,g_vala,g_anna,g_vilya,
                 g_extthuule,g_extformen,g_extharma,g_exthwesta,g_extanto,g_extampa,g_extanca,g_extunque,
                 g_lambe,g_alda,g_hyarmen,g_yanta,g_longcarr,g_halla,g_shortcarr,
                 g_atengwa,g_openanna,g_mhtengwa,g_beleriandicmh);
  dectengwar=   (g_tinco_dec,g_parma_dec,g_calma_dec,g_quesse_dec,g_ando_dec,g_umbar_dec,g_anga_dec,g_ungwe_dec,
                 g_thuule_dec,g_formen_dec,g_harma_dec,g_hwesta_dec,g_anto_dec,g_ampa_dec,g_anca_dec,g_unque_dec,
                 g_nuumen_dec,g_malta_dec,g_noldo_dec,g_nwalme_dec,g_oore_dec,g_vala_dec,g_anna_dec,g_vilya_dec,
                 g_extthuule_dec,g_extformen_dec,g_extharma_dec,g_exthwesta_dec,g_extanto_dec,g_extampa_dec,g_extanca_dec,g_extunque_dec,
                 g_lambe_dec,g_alda_dec,g_hyarmen_dec,g_yanta_dec,g_longcarr_dec,g_halla_dec,g_shortcarr_dec,
                 g_atengwa_dec,g_openanna_dec,g_mhtengwa_dec,g_beleriandicmh_dec);

  WideTengwar=(Ando,Umbar,Anga,Ungwe,Anto,Ampa,Anca,Unque,Nuumen,Malta,Noldo,Nwalme,ExtAnto,ExtAmpa,ExtAnca,ExtUnque,Mhtengwa);
  StemUpRightTengwar=(Harma,Hwesta,Anca,Unque,ExtHarma,ExtHwesta,ExtAnca,ExtUnque,g_silme_flat,g_silme_lig_flat,g_aare_flat,HwestaSin);
  StemUpLeftTengwar=(Thuule,Formen,Anto,Ampa,ExtThuule,ExtFormen,ExtAnto,ExtAmpa,g_silme_open,g_silme_lig_open,g_aare_open,Hyarmen,AngWhtengwa,g_tinco_lig,LargeInterp);
  StemDownRightTengwar=(Calma,Quesse,Anga,Ungwe,ExtHarma,ExtHwesta,ExtAnca,ExtUnque,g_silmenuq,g_aarenuq);
  StemDownLeftTengwar=(Tinco,Parma,Ando,Umbar,ExtThuule,ExtFormen,ExtAnto,ExtAmpa,Roomen,Arda,AngWhtengwa);
  NarrowTengwar=(LongCarr,Halla,ShortCarr,ConnCarr,Atengwa,MirroredOsse);

  AnyTengwa=(Tinco,Parma,Calma,Quesse,Ando,Umbar,Anga,Ungwe,Thuule,Formen,Harma,Hwesta,
             Anto,Ampa,Anca,Unque,Nuumen,Malta,Noldo,Nwalme,Oore,Vala,Anna,Vilya,
             ExtThuule,ExtFormen,ExtHarma,ExtHwesta,ExtAnto,ExtAmpa,ExtAnca,ExtUnque,
             Roomen,Arda,Lambe,Alda,Silme,SilmeNuq,Aare,AareNuq,Hyarmen,HwestaSin,Yanta,Uure,LongCarr,Halla,ShortCarr,
             MirroredOsse,Wtengwa,Atengwa,ConnCarr,Whtengwa,OpenAnna,PreFeaQu,Mhtengwa,BeleriandicMh,AngWhtengwa,Vaiya,SHook,
             g_dottedcircle);

  SomeMayConR=(g_calma,g_quesse,g_quesse_conl,g_anga,g_ungwe,g_ungwe_conl,g_noldo,g_nwalme,g_nwalme_conl,g_anna,g_vilya,g_vilya_conl,g_conncarr);
  SomeDoConR=(g_calma_conr,g_quesse_conr,g_quesse_conb,g_anga_conr,g_ungwe_conr,g_ungwe_conb,g_noldo_conr,g_nwalme_conr,g_nwalme_conb,g_anna_conr,g_vilya_conr,g_vilya_conb,g_conncarr_conr);
  MayConR=(SomeMayConR,g_lambe,g_lambe_conl,g_alda,g_alda_conl,g_uure);
  DoConR=(SomeDoConR,g_lambe_conr,g_lambe_conb,g_alda_conr,g_alda_conb,g_uure_conr);

  SomeMayConL=(g_tinco,g_parma,g_ando,g_umbar,g_nuumen,g_malta,g_oore,g_vala,g_roomen,g_arda,g_lambe,g_alda,g_shortcarr,g_longcarr,g_openanna,g_shook);
  SomeDoConL=(g_tinco_conl,g_parma_conl,g_ando_conl,g_umbar_conl,g_nuumen_conl,g_malta_conl,g_oore_conl,g_vala_conl,g_roomen_conl,g_arda_conl,g_lambe_conl,g_alda_conl,g_shortcarr_conl,g_longcarr_conl,g_openanna_conl,g_shook_high);
  MayConL=(SomeMayConL,g_quesse,g_ungwe,g_hwesta,g_unque,g_nwalme,g_vilya,g_exthwesta,g_extunque);
  DoConL=(SomeDoConL,g_quesse_conl,g_ungwe_conl,g_hwesta_conl,g_unque_conl,g_nwalme_conl,g_vilya_conl,g_exthwesta_conl,g_extunque_conl);

  MayConRLow=(g_tinco,g_tinco_conl,g_ando,g_ando_conl,g_umbar,g_umbar_conl,g_parma,g_parma_conl,g_thuule,g_formen,g_harma,g_hwesta,g_hwesta_conl,g_anto,g_ampa,g_anca,g_unque,g_unque_conl,g_nuumen,g_nuumen_conl,g_malta,g_malta_conl,g_noldo,g_nwalme,g_nwalme_conl,g_oore,g_oore_conl,g_vala,g_vala_conl,g_anna,g_vilya,g_vilya_conl,g_shortcarr,g_shortcarr_conl,g_lambe,g_lambe_conl,g_hyarmen,g_yanta);
  DoConRLow=(g_tinco_conr,g_tinco_conb,g_ando_conr,g_ando_conb,g_umbar_conr,g_umbar_conb,g_parma_conr,g_parma_conb,g_thuule_conr,g_formen_conr,g_harma_conr,g_hwesta_conr,g_hwesta_conb,g_anto_conr,g_ampa_conr,g_anca_conr,g_unque_conr,g_unque_conr,g_nuumen_conr,g_nuumen_conb,g_malta_conr,g_malta_conb,g_noldo_conrbot,g_nwalme_conrbot,g_nwalme_conbbot,g_oore_conr,g_oore_conb,g_vala_conr,g_vala_conb,g_anna_conrbot,g_vilya_conrbot,g_vilya_conbbot,g_shortcarr_conr,g_shortcarr_conb,g_lambe_conrbot,g_lambe_conbbot,g_hyarmen_conr,g_yanta_conr);
  MayConLLow=(g_shook); DoConLLow=(g_shook);

  IsolUpTehtar=(g_atehta,g_ytehta,g_itehta,g_etehta,g_otehta,g_utehta,g_overbar,g_wtehta,g_engytehta,g_revetehta,g_yantatehta,g_invatehta);
  IsolCentralTehtar=(g_dotinside);
  IsolDownTehtar=(g_downatehta,g_downytehta,g_downitehta,g_downetehta,g_dblunderstroke,g_downotehta,g_downutehta,g_underbar,g_longcarrtehta,g_shooktehta,g_thinnas);
  IsolTehtar=(IsolUpTehtar,IsolCentralTehtar,IsolDownTehtar);

  CombUpTehtar=(g_atehta_norm,g_ytehta_norm,g_itehta_norm,g_etehta_norm,g_otehta_norm,g_utehta_norm,g_overbar_norm,g_wtehta_norm,g_engytehta_norm,g_revetehta_norm,g_yantatehta_norm,g_invatehta_norm);
  CombCentralTehtar=(g_dotinside_norm);
  CombDownTehtar=(g_downatehta_norm,g_downytehta_norm,g_downitehta_norm,g_downetehta_norm,g_dblunderstroke_norm,g_downotehta_norm,g_downutehta_norm,g_underbar_norm,g_longcarrtehta_norm,g_shooktehta_norm,g_thinnas_norm);
  CombTehtar=(CombUpTehtar,CombCentralTehtar,CombDownTehtar);

  VarUpTehtar=(g_etehta_double_norm,g_otehta_wide,g_otehta_narrow,g_otehta_double_norm,g_otehta_double_wide,g_otehta_double_narrow,g_utehta_double_norm,g_overbar_wide,g_overbar_lambe,g_overbar_silme,g_wtehta_wide,g_wtehta_narrow,g_engytehta_wide,g_otehtadot_norm,g_utehtadot_norm);
  VarCentralTehtar=(g_dotinside_conu,g_dotinside_cond);
  VarDownTehtar=(g_downetehta_double_norm,g_downutehta_wide,g_downutehta_narrow,g_downutehta_long,g_underbar_wide,g_underbar_roomen,g_underbar_silme,g_underbar_lambe,g_longcarrtehta_lambe);
  VarTehtar=(VarUpTehtar,VarCentralTehtar,VarDownTehtar);

  AnyUpTehta=(CombUpTehtar,VarUpTehtar);
  AnyCentralTehta=(CombCentralTehtar,VarCentralTehtar);
  AnyDownTehta=(CombDownTehtar,VarDownTehtar);
  AnyTehta=(CombTehtar,AnyCentralTehta,VarTehtar);

  OverbarTehta=(g_overbar_norm,g_overbar_wide,g_overbar_lambe,g_overbar_silme);
  UnderbarTehta=(g_underbar_norm,g_underbar_wide,g_underbar_roomen,g_underbar_silme,g_underbar_lambe);

  ZWNJ=g_zwnj_hidden;
  ZWJ=g_zwj_hidden;
  //ZWJ=g_zwj;
  //ZWNJ=g_zwnj;

//  LatinVowels = (g_a,g_i,g_e,g_o,g_u);
//  LatinTehtar = (g_atehta,g_itehta,g_etehta,g_otehta,g_utehta);
//  LatinConsonants = (g_b,g_c,g_d,g_f,g_g,g_h,g_j,g_k,g_l,g_m,g_n,g_p,g_q,g_r,g_s,g_t,g_v,g_w,g_x,g_z);

  Underlinees=(g_tinco, g_tinco_conr,g_tinco_conl,g_tinco_conb, g_ando,  g_ando_conr,g_ando_conl,g_ando_conb, g_thuule,g_thuule_conr, g_anto,  g_anto_conr, g_oore,  g_oore_conr,g_oore_conl,g_oore_conb, g_nuumen,g_nuumen_conr,g_nuumen_conl,g_nuumen_conb, g_extthuule,g_extthuule_conr, g_extanto,g_extanto_conr);
  Underliners=(g_uline0,g_uline0,    g_uline0,    g_uline0,     g_uline1,g_uline1,   g_uline1,   g_uline1,    g_uline2,g_uline2,      g_uline3,g_uline3,    g_uline4,g_uline4,   g_uline4,   g_uline4,    g_uline5,g_uline5,     g_uline5,     g_uline5,      g_uline6,   g_uline6,         g_uline7, g_uline7);
  Underlinees+=(g_parma, g_parma_conr,g_parma_conl,g_parma_conb, g_umbar, g_umbar_conr,g_umbar_conl,g_umbar_conb, g_formen,g_formen_conr, g_ampa,  g_ampa_conr, g_vala,  g_vala_conr,g_vala_conl,g_vala_conb, g_malta, g_malta_conr,g_malta_conl,g_malta_conb, g_extformen,g_extformen_conr, g_extampa,g_extampa_conr);
  Underliners+=(g_uline0,g_uline0,    g_uline0,    g_uline0,     g_uline1,g_uline1,    g_uline1,    g_uline1,     g_uline2,g_uline2,      g_uline3,g_uline3,    g_uline4,g_uline4,   g_uline4,   g_uline4,    g_uline5,g_uline5,    g_uline5,    g_uline5,     g_uline6,   g_uline6,         g_uline7, g_uline7);
  Underlinees+=(g_calma,  g_calma_conr, g_anga,   g_anga_conr, g_harma, g_harma_conr, g_anca,  g_anca_conr, g_anna,  g_anna_conr,g_anna_conrbot, g_noldo, g_noldo_conr,g_noldo_conrbot, g_extharma, g_extanca);
  Underliners+=(g_uline22,g_uline22,    g_uline23,g_uline23,   g_uline2,g_uline2,     g_uline3,g_uline3,    g_uline2,g_uline2,   g_uline2,       g_uline3,g_uline3,    g_uline3,        g_uline22,  g_uline23);
  Underlinees+=(g_quesse, g_quesse_conr,g_quesse_conl,g_quesse_conb, g_ungwe,  g_ungwe_conr,g_ungwe_conl,g_ungwe_conb, g_hwesta,g_hwesta_conr,g_hwesta_conl,g_hwesta_conb, g_unque, g_unque_conr,g_unque_conl,g_unque_conb, g_vilya, g_vilya_conr,g_vilya_conl,g_vilya_conb,g_vilya_conrbot,g_vilya_conbbot,g_nwalme,g_nwalme_conr,g_nwalme_conl,g_nwalme_conb,g_nwalme_conrbot,g_nwalme_conbbot, g_exthwesta,g_exthwesta_conl, g_extunque,g_extunque_conl);
  Underliners+=(g_uline22,g_uline22,    g_uline22,    g_uline22,     g_uline23,g_uline23,   g_uline23,   g_uline23,    g_uline2,g_uline2,     g_uline2,     g_uline2,      g_uline3,g_uline3,    g_uline3,    g_uline3,     g_uline2,g_uline2,    g_uline2,    g_uline2,    g_uline2,       g_uline2,       g_uline3,g_uline3,     g_uline3,     g_uline3,     g_uline3,        g_uline3,         g_uline22,  g_uline22,        g_uline23, g_uline23);
  Underlinees+=(g_roomen, g_roomen_conl,g_roomen_open,g_roomen_conl_open, g_arda,   g_arda_conl,g_arda_open,g_arda_conl_open,g_lambe,  g_lambe_conr,g_lambe_conl,g_lambe_conb,g_lambe_conrbot,g_lambe_conbbot,g_alda,   g_alda_conr,g_alda_conl,g_alda_conb);
  Underliners+=(g_uline32,g_uline32,    g_uline33,    g_uline33,          g_uline32,g_uline32,  g_uline33,  g_uline33,       g_uline34,g_uline34,   g_uline34,   g_uline34,   g_uline34,      g_uline34,      g_uline35,g_uline35,  g_uline35,  g_uline35);
  Underlinees+=(g_silme,  g_silme_open,g_silme_flat,g_silme_lig,g_silme_lig_open,g_silme_lig_flat,g_silme_lig_harma,g_silmenuq,g_aare,   g_aare_open,g_aare_flat,g_aarenuq,g_hyarmen,g_hyarmen_conr,g_hwestasin,g_yanta,  g_yanta_conr,g_uure,   g_uure_conr,g_longcarr,g_longcarr_conl,g_halla,  g_shortcarr,g_shortcarr_conr,g_shortcarr_conl,g_shortcarr_conb);
  Underliners+=(g_uline36,g_uline36,   g_uline36,   g_uline37,  g_uline37,       g_uline37,       g_uline37,        g_uline38, g_uline39,g_uline39,  g_uline39,  g_uline40,g_uline41,g_uline42,     g_uline43,  g_uline41,g_uline45,   g_uline46,g_uline47,  g_uline48, g_uline48,      g_uline49,g_uline49,  g_uline49,       g_uline49,       g_uline49   );
  Underlinees+=(g_mirroredosse,g_wtengwa,g_atengwa_desc,g_wtengwa_desc,g_atengwa,g_conncarr,g_conncarr_long,g_conncarr_conr,g_openanna,g_openanna_conl,g_prefeanoreanqu,g_whtengwa,g_whtengwa_varone,g_whtengwa_vartwo,g_mhtengwa,g_beleriandicmh,g_angwhtengwa,g_vaiya,  g_shook,  g_shook_high);
  Underliners+=(g_uline50,     g_uline50,g_uline50,     g_uline51,     g_uline52,g_uline53, g_uline53,      g_uline53,      g_uline54, g_uline54,      g_uline55,       g_uline56, g_uline57,        g_uline58,        g_uline59, g_uline60,      g_uline61,    g_uline62,g_uline63,g_uline64);
  Underlinees+=(g_tinco_dec,g_parma_dec);
  Underliners+=(g_uline65,  g_uline65);

endtable;

// We will deal with at most 4 tehtar. Change if the need arises.
// This is very demanding, I'm afraid, both memory and time wise; hence the restriction.
#define AnyIsolTehtar [[[[IsolTehtar]?IsolTehtar]?IsolTehtar]?IsolTehtar]?
#define AnyIsolUpTehtar [[[IsolUpTehtar]?IsolUpTehtar]?IsolUpTehtar]?
// If there is at least one uptehta, there can be only 2 downtehtar:
#define AnyIsolDownTehtar [[IsolDownTehtar]?IsolDownTehtar]?

#define AnyTehtar [[[AnyTehta]?AnyTehta]?AnyTehta]?
#define AnyDownTehtar [[AnyDownTehta]?AnyDownTehta]?

#define decadjusted user1

table(sub)

  pass(1)
    if (decteng==all || decteng==init)
      Notdectengwar > dectengwar / ^ _ {decadjusted==false};
    endif;
    if (decteng==init)
      dectengwar > Notdectengwar {decadjusted=true} / (AnyTengwa,IsolTehtar) ZWJ? ^ _ ;
    endif;
    if (ossetail==all || ossetail==final)
      g_atengwa > g_atengwa_desc / ^ _ ;
    endif;

    g_zwj g_longcarr > _ g_longcarrtehta;
    g_zwj > g_zwj_hidden;
    g_zwnj > g_zwnj_hidden;

  endpass;

  pass(2)

  // First rules that affect tengwar:

    (g_harma,g_hwesta,g_hwesta_conl) g_tinco > (g_extharma,g_exthwesta,g_exthwesta_conl) g_tinco_lig / ^ _ AnyIsolTehtar ZWJ _ ;
    g_silme > g_silme_lig_harma / ^ _ ZWJ Harma ;
    g_silme > g_silme_lig / ^ _ AnyIsolTehtar ZWJ AnyTengwa ;

    if (lowershook)
      MayConRLow MayConLLow > DoConRLow DoConLLow / ^ _ AnyIsolTehtar ZWJ? _ ;
    endif;
    MayConR MayConL > DoConR DoConL / ^ _ AnyIsolTehtar ZWJ _ ;
    if (tengconnect==all)
      MayConR MayConL > DoConR DoConL / ^ _ AnyIsolTehtar _ ;
    elseif (tengconnect==some)
      SomeMayConR SomeMayConL > SomeDoConR SomeDoConL / ^ _ AnyIsolTehtar  _ ;
    endif;
    MayConR (g_shook) > DoConR (g_shook_high) / ^ _ AnyIsolTehtar _ ;
    g_conncarr MayConL > g_conncarr_conr DoConL / ^ _ AnyIsolTehtar _ ;
    g_conncarr > g_conncarr_long / ^ _ AnyIsolTehtar ZWJ? (Calma,Anga,Harma,Anca,Noldo,Anna,ExtHarma,ExtAnca,Hyarmen,g_whtengwa);
    if (!lowershook)
      MayConRLow MayConLLow > DoConRLow DoConLLow / ^ _ AnyIsolTehtar ZWJ? _ ;
    endif;

    (g_roomen,g_roomen_conl,g_arda,g_arda_conl) > (g_roomen_open,g_roomen_conl_open,g_arda_open,g_arda_conl_open)
           / _ AnyIsolUpTehtar IsolDownTehtar ;
    if (silmepref==left)
      (g_silme,g_silme_lig,g_aare) > (g_silme_flat,g_silme_lig_flat,g_aare_flat) / ^ _ AnyIsolDownTehtar IsolUpTehtar ;
    elseif (silmepref==right)
      (g_silme,g_silme_lig,g_aare) > (g_silme_open,g_silme_lig_open,g_aare_open) / ^ _ AnyIsolDownTehtar IsolUpTehtar ;
    endif;
    if (descwtengwa)
      g_wtengwa > g_wtengwa_desc;
    endif;
    if (whtengwa==roomen)
       g_whtengwa > g_whtengwa_varone;
    elseif (whtengwa==hyarmen)
       g_whtengwa > g_whtengwa_vartwo;
    endif;
    if (ossetail==final)
       g_atengwa_desc > g_atengwa / ^ _ AnyIsolUpTehtar ZWJ? AnyTengwa;
    endif;


  // When none of the above rules match anymore, we proceed to the next character, possibly a tehta:

    // Change "isolated" forms (i.e. on a dotted circle) to non-spacing forms:
    IsolTehtar > CombTehtar / AnyTengwa ^ AnyTehtar _ ;

    // Sort the tehtar. This simplifies things further on.
//    AnyUpTehta AnyUpTehta AnyUpTehta AnyUpTehta AnyUpTehta AnyDownTehta > @6 @1 @2 @3 @4 @5 / ^ _ _ _ _ _ _ ;
//    AnyUpTehta AnyUpTehta AnyUpTehta AnyUpTehta AnyDownTehta > @5 @1 @2 @3 @4 / ^ _ _ _ _ _ ;
    AnyUpTehta AnyUpTehta AnyUpTehta AnyDownTehta > @4 @1 @2 @3 / ^ _ _ _ _ ;
    AnyUpTehta AnyUpTehta AnyDownTehta > @3 @1 @2 / ^ _ _ _ ;
    AnyUpTehta AnyDownTehta > @2 @1 / ^ _ _ ;

    (g_underbar_norm) > g_underbar_roomen / Roomen _ ;
    (g_underbar_norm) > g_underbar_silme / (SilmeNuq,AareNuq) _ ;
    (g_overbar_norm) > g_overbar_silme / (Silme,Aare) AnyDownTehtar _ ;
    (g_overbar_norm,g_underbar_norm,g_otehta_norm,g_wtehta_norm,g_engytehta_norm) > (g_overbar_wide,g_underbar_wide,g_otehta_wide,g_wtehta_wide,g_engytehta_wide)
           / WideTengwar ^ AnyTehtar _ ;
    g_otehta_norm > g_otehta_wide / (Tinco,Parma,Thuule,Formen,Oore,Vala,ExtThuule,ExtFormen,OpenAnna,BeleriandicMh) ^ AnyTehtar _ ;
    (g_otehta_norm,g_overbar_norm,g_underbar_norm,g_engytehta_norm) > (g_otehta_wide,g_overbar_lambe,g_underbar_lambe,g_engytehta_wide)
           / (Lambe,Alda) ^ AnyTehtar _ ;
    g_longcarrtehta_norm > g_longcarrtehta_lambe / Lambe g_underbar_lambe? ^ _ ;
    (g_downutehta_norm) > (g_downutehta_long) / (Roomen,Arda,Lambe,Alda,AngWhtengwa) UnderbarTehta? _ ;
    (g_downutehta_norm) > (g_downutehta_narrow) / (Tinco,Parma,ExtThuule,ExtFormen) UnderbarTehta? _ ;
    (g_downutehta_norm) > (g_downutehta_wide) / WideTengwar UnderbarTehta? _ ;
    g_wtehta_norm > g_wtehta_narrow / (StemUpRightTengwar,StemUpLeftTengwar,NarrowTengwar) AnyTehtar _ ;
    (g_otehta_norm,g_otehta_double_norm) > (g_otehta_narrow,g_otehta_double_narrow)
           / NarrowTengwar AnyTehtar ^ _ AnyTehtar StemUpLeftTengwar;
    (g_otehta_norm,g_otehta_double_norm) > (g_otehta_narrow,g_otehta_double_narrow) / StemUpRightTengwar AnyTehtar _ ;
 
    g_itehta_norm g_itehta_norm > g_ytehta_norm _ / ^ _ _ ;
    g_etehta_norm g_etehta_norm > g_etehta_double_norm _ / ^ _ _ ;
    g_downetehta_norm g_downetehta_norm > g_downetehta_double_norm _ / ^ _ _ ;
    g_otehta_narrow g_otehta_narrow > g_otehta_double_narrow _ / ^ _ _ ;
    g_otehta_norm g_otehta_norm > g_otehta_double_norm _ / ^ _ _ ;
    g_otehta_wide g_otehta_wide > g_otehta_double_wide _ / ^ _ _ ;
    g_utehta_norm g_utehta_norm > g_utehta_double_norm _ / ^ _ _ ;

    g_itehta_norm g_utehta_norm > g_utehtadot_norm _ / ^ _ _ ;
    g_utehta_norm g_itehta_norm > g_utehtadot_norm _ / ^ _ _ ;
    g_itehta_norm (g_otehta_narrow,g_otehta_norm,g_otehta_wide) > g_otehtadot_norm _ / ^ _ _ ;
    (g_otehta_narrow,g_otehta_norm,g_otehta_wide) g_itehta_norm > g_otehtadot_norm _ / ^ _ _ ;

    g_dotinside_norm > g_dotinside_conu / (Quesse,Ungwe,Hwesta,Unque,Nwalme,Vilya,ExtHwesta,ExtUnque) ^ _ ;
    g_dotinside_norm > g_dotinside_cond / (Parma,Umbar,Formen,Ampa,Malta,Vala,ExtFormen,ExtAmpa,PreFeaQu,BeleriandicMh) ^ _ ;

  endpass;

  pass(3)
    if (underline==yes)
       g_uline_end Underlinees _ > Underliners$2:2 @2 g_uline_end:2 / _ _ AnyTehtar ZWJ? ^ _ ;
       _ _ Underlinees _ > g_uline_start:3 Underliners$3:3 @3 g_uline_end:3 / _ _ _ AnyTehtar ZWJ? ^ _ ;
    endif;
  endpass;

endtable;

#define attached user2

table(pos)

  pass(1)

    if (underline==yes)
      g_uline_start { attach{ to=@2; at=point(0m,0m); with=point(0m,0m) }; } Underliners  / _ ^ _;
      Underliners { attach{ to=@2; at=point(0m,0m); with=point(0m,0m) }; } Underlinees  / _ ^ _;
    endif;

    Lambe g_underbar_lambe { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } AnyDownTehta { attach{ to=@2; at=dap; with=uap }; insert=true; attached=true; } AnyDownTehta { attach{ to=@1; at=dap; with=uap }; insert=true; attached=true; } / ^ _ _ _ _ {attached==false} ;
    Lambe g_underbar_lambe { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } AnyDownTehta { attach{ to=@2; at=dap; with=uap }; insert=true; attached=true; } / ^ _ _ _ {attached==false} ;
    Lambe AnyDownTehta { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } AnyDownTehta { attach{ to=@1; at=dap; with=uap }; insert=true; attached=true; } / ^ _ _ _ {attached==false} ;
    Lambe AnyDownTehta { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } / ^ _ _  {attached==false} ;
    Alda g_underbar_lambe { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } AnyDownTehta { attach{ to=@1; at=dap; with=ruap }; insert=true; attached=true; } / ^ _ _ _ {attached==false} ;
    Alda g_underbar_lambe { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; } / ^ _ _ {attached==false} ;

    AnyTengwa AnyCentralTehta { attach{ to=@1; at=cap; with=cap }; insert=true; attached=true; }  /  _ ^ _ {attached==false} ;

    StemUpRightTengwar OverbarTehta { attach{ to=@1; at=uap; with=ldap }; insert=true; attached=true; }  / ^ _ AnyDownTehtar _ {attached==false} ;
    StemUpLeftTengwar OverbarTehta { attach{ to=@1; at=uap; with=rdap }; insert=true; attached=true; }  / ^ _ AnyDownTehtar _ {attached==false} ;
    AnyTengwa AnyUpTehta { attach{ to=@1; at=uap; with=dap }; insert=true; attached=true; }  / ^ _ AnyCentralTehta? AnyDownTehtar _ {attached==false} ;
    AnyUpTehta AnyUpTehta { attach{ to=@1; at=uap; with=dap }; insert=true; attached=true; }  /  _ ^ _ {attached==false} ;

    StemDownRightTengwar UnderbarTehta { attach{ to=@1; at=dap; with=luap }; insert=true; attached=true; } / ^ _ _ {attached==false} ;
    StemDownLeftTengwar UnderbarTehta { attach{ to=@1; at=dap; with=ruap }; insert=true; attached=true; } / ^ _ _ {attached==false} ;
    AnyTengwa AnyDownTehta { attach{ to=@1; at=dap; with=uap }; insert=true; attached=true; } / ^ _ AnyCentralTehta? _ {attached==false} ;
    AnyDownTehta AnyDownTehta { attach{ to=@1; at=dap; with=uap }; insert=true; attached=true; } / ^ _ _ {attached==false} ;

  endpass;

  pass(2)
    Lambe (g_downutehta_long,g_longcarrtehta_lambe) { attach{ to=@1; at=cap; with=cap }; insert=true;} / _ g_underbar_lambe _ ;
    Alda (g_downutehta_long,g_underbar_lambe) { attach{ to=@1; at=cap; with=cap }; insert=true;} / _ _ ;

    (g_silme_flat,g_silme_lig_flat,g_aare_flat) AnyUpTehta { attach{ to=@1; at=uap; with=rdap }; insert=true;} / _ ^ AnyDownTehtar _ ;
    (g_roomen_open,g_roomen_conl_open,g_arda_open,g_arda_conl_open,AngWhtengwa,g_downutehta_long) AnyDownTehta { attach{ to=@1; at=dap; with=luap }; insert=true;} / _ ^ _ ;
    (g_silme_open,g_silme_lig_open,g_aare_open,Hyarmen) AnyUpTehta { attach{ to=@1; at=uap; with=ldap }; insert=true;} / _ ^ AnyDownTehtar _ ;
    (g_silmenuq,g_aarenuq,Alda,Mhtengwa) AnyDownTehta { attach{ to=@1; at=dap; with=ruap }; insert=true;} / _ ^ _ ;

    g_underbar_roomen AnyDownTehta { attach{ to=@1; at=ldap; with=luap }; insert=true;} / _ _ ;
    if (silmepref==left)
//      g_overbar_silme AnyUpTehta { attach{ to=@2; at=ruap; with=rdap }; insert=true;} / (g_silme_flat,g_silme_lig_flat) _ _ ;
//      g_underbar_silme AnyDownTehta { attach{ to=@2; at=ldap; with=luap }; insert=true;} / (g_silmenuq_flat) _ _ ;
      g_overbar_silme AnyUpTehta { attach{ to=@1; at=ruap; with=rdap }; insert=true;} / _ _ ;
      g_underbar_silme AnyDownTehta { attach{ to=@1; at=ldap; with=luap }; insert=true;} /  _ _ ;
    elseif (silmepref==right)
//      g_overbar_silme AnyUpTehta { attach{ to=@2; at=luap; with=ldap }; insert=true;} / (g_silme_open,g_silme_lig_open) _ _ ;
//      g_underbar_silme AnyDownTehta { attach{ to=@2; at=rdap; with=ruap }; insert=true;} / (g_silmenuq_open) _ _ ;
      g_overbar_silme AnyUpTehta { attach{ to=@1; at=luap; with=ldap }; insert=true;} / _ _ ;
      g_underbar_silme AnyDownTehta { attach{ to=@1; at=rdap; with=ruap }; insert=true;} / _ _ ;
    endif;

  endpass;

  pass(3)
    (g_silme_lig,g_silme_lig_flat,g_silme_lig_open) (Calma,Anga,Harma,Anca,Noldo,Anna,Uure) {kern.x = +105m} / _ ^ AnyTehtar ZWJ _;
    (g_silme_lig,g_silme_lig_flat,g_silme_lig_open) (Quesse,Ungwe,Hwesta,Unque,Nwalme,Vilya) {kern.x = +10m} / _ ^ AnyTehtar ZWJ _;
    (g_silme_lig,g_silme_lig_flat,g_silme_lig_open) (Roomen,Arda) {kern.x = -50m} / _ AnyTehtar ZWJ ^ _;
    (g_silme_lig,g_silme_lig_flat,g_silme_lig_open) (Lambe) {kern.x = -90m} / _ AnyTehtar ZWJ ^ _;
    (g_silme_lig,g_silme_lig_flat,g_silme_lig_open) (Silme) {kern.x = +115m} / _ AnyTehtar ZWJ ^ _;

    (Roomen,Arda) (Hyarmen,Yanta) {kern.x = -150m} / _ AnyTehtar ^ _;
    Hyarmen Roomen {kern.x = -110m} / _ AnyTehtar ^ _;
    Yanta Roomen {kern.x = -160m} / _ AnyTehtar ^ _;
    g_conncarr (SilmeNuq,AareNuq,HwestaSin,Yanta,Uure,Atengwa,Vaiya) {kern.x = -135m} / _ AnyTehtar ^ _;

    (Roomen,Arda) g_utehta_norm {shift.x = -125m} / _ AnyDownTehtar ^ _;
    (Roomen,Arda) g_otehta_norm {shift.x = -120m} / _ AnyDownTehtar ^ _;
    (Tinco,Thuule,Oore,ExtThuule,BeleriandicMh) g_otehta_wide {shift.x = -190m} / _ AnyDownTehtar ^ _;
    (Parma,Formen,Vala,ExtFormen,Unque,ExtUnque,OpenAnna) g_otehta_wide {shift.x = -170m} / _ AnyDownTehtar ^ _;
    (Anga,Anca,Noldo,ExtAnca) g_otehta_wide {shift.x = -150m} / _ AnyDownTehtar ^ _;
    (ShortCarr,LongCarr,Atengwa) g_otehta_norm {shift.x = 120m} / _ AnyDownTehtar ^ _;
    (Hwesta,ExtHwesta) g_otehta_narrow {shift.x = -125m} / _ ^ _;
    (Hwesta,ExtHwesta) g_utehta_norm {shift.x = -130m} / _ ^ _;
    (Hwesta,ExtHwesta) g_wtehta_narrow {shift.x = -60m} / _ ^ _;
    g_wtehta_norm g_atehta_norm {shift.x = 60m} / _ ^ _;

    g_downotehta_norm {shift.x = -400m} / g_silme_lig_harma ZWJ Harma ^ _;
    g_longcarrtehta_norm {shift.x = 90m; shift.y = 350m} / g_downutehta_long ^ _;
    g_downatehta_norm {shift.x = -150m} g_longcarrtehta_norm {shift.x = 450m; shift.y = 460m};
    (Hyarmen,Yanta) g_downitehta_norm {shift.y = 150m};
    (g_silme_open,g_aare_open) g_itehta_norm {shift.x = -100m};

    g_startmodechange (Tinco,Parma,Quesse,Ando,Umbar,Ungwe,Hwesta,Unque,Nuumen,Malta,Nwalme,Oore,Vala,Vilya,ExtHwesta,ExtUnque,Roomen,Arda,Lambe,Alda,g_silme,g_aare,Yanta,Mhtengwa,BeleriandicMh) {kern.x = -100m};
    g_startmodechange (Anga,Harma,SilmeNuq,AareNuq,HwestaSin,Uure,Wtengwa,Atengwa,PreFeaQu,Vaiya) {kern.x = -200m};
    g_startmodechange (Calma,Anca,Noldo,Anna,ExtHarma,ExtAnca) {kern.x = -300m};
    (Tinco,Ando,Thuule,Anto,ExtThuule,ExtAnto,Nuumen,Oore,Roomen,Arda,Silme,Uure,AngWhtengwa) g_endmodechange {kern.x = -150m} / _ AnyTehtar ^ _;

  endpass;

endtable;
