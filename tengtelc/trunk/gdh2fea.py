import re

alias_to_codepoint = {}
glyph_ap_pos = {}
known_glyphs = set()
classes = {}

def get_glyph_names(entries):
	glyphs = set()
	for entry in entries:
		glyphs |= classes[entry] if entry.startswith('@') else set([entry])
	unknowns = glyphs - known_glyphs
	if len(unknowns) > 0:
		print('Error: Unknown glyph{} {}'.format(
			's' if len(unknowns) > 1 else '',
			', '.join(list(unknowns))
		))
		exit(1)
	return sorted(list(glyphs), key=lambda x: alias_to_codepoint.get(x, x))

def mark_class(markap):
	output = []
	for glyph in get_glyph_names(['@AnyTehta']):
		if (glyph, markap) not in glyph_ap_pos:
			continue
		x, y = glyph_ap_pos[(glyph, markap)]
		output.append(f'markClass [{glyph}] <anchor {x} {y}> @MARK_CLASS_{markap.upper()};')
	output.append('')
	return '\n'.join(output)

def mark_to(type, name, bases, baseap, marks, markap):
	assert type in ['base', 'mark']
	bases = bases if isinstance(bases, list) else [bases]
	marks = marks if isinstance(marks, list) else [marks]
	output = []
	output.append(f'lookup {name} {{')
	for mark in get_glyph_names(marks):
		if (mark, markap) not in glyph_ap_pos:
			output.append(f'  # Attach point {markap} not set for mark glyph {mark}')
	output.append(f'  @{name}_FILTERING_SET = [{" ".join(marks)}];')
	output.append(f'  lookupflag UseMarkFilteringSet @{name}_FILTERING_SET;')
	for base in get_glyph_names(bases):
		if (base, baseap) not in glyph_ap_pos:
			output.append(f'  # Attach point {baseap} not set for base glyph {base}')
			continue
		x, y = glyph_ap_pos[(base, baseap)]
		output.append(f'  position {type} [{base}] <anchor {x} {y}> mark @MARK_CLASS_{markap.upper()};')
	output.append(f'}} {name};')
	output.append('')
	return '\n'.join(output)

for logfilename in ['latin.log', 'tengwar.log']:
	with open(logfilename, 'r') as logfile:
		for line in logfile:
			match = re.match(r'al: (\S*) (\S*)', line)
			if match:
				alias_to_codepoint[match.group(2)] = match.group(1)

for ghdfilename in ['latin.gdh', 'tengwar.gdh', 'underline.gdh']:
	with open(ghdfilename, 'r') as gdhfile:
		for alias, glyph, aps in re.findall(r'(\w+) = ps\("([^"]+)"\) {([^}]+)};', gdhfile.read()):
			known_glyphs.add(glyph)
			for ap, x, y in re.findall(r'(\w+) = point\((-?\d+)m,(-?\d+)m\);', aps):
				glyph_ap_pos[(glyph, ap)] = (int(x), int(y))

with open('tengtelc.fea', 'r') as feafile:
	for class_name, classdef in re.findall(r'(@\w+)\s*=\s*\[([^]]*)\];', feafile.read()):
		assert class_name not in classes
		classes[class_name] = set(get_glyph_names(classdef.split()))

gpos = ['# NOTE: This file is automatically generated. Do not edit!\n']
for ap in ['cap', 'dap', 'ldap', 'rdap', 'uap', 'luap', 'ruap']:
	gpos.append(mark_class(ap))
gpos.append(mark_to('base', 'TEHTA_INSIDE', '@AnyTengwa', 'cap', '@AnyCentralTehta', 'cap'))
gpos.append(mark_to('base', 'UPTEHTA', '@AnyTengwa', 'uap', '@AnyUpTehta', 'dap'))
gpos.append(mark_to('base', 'OVERBAR_LEFT', '@StemUpRightTengwar', 'uap', '@OverbarTehta', 'ldap'))
gpos.append(mark_to('base', 'OVERBAR_RIGHT', '@StemUpLeftTengwar', 'uap', '@OverbarTehta', 'rdap'))
gpos.append(mark_to('base', 'UPTEHTA_LEFT', ['silme.flat', 'silme.lig_flat', 'aare.flat'], 'uap', '@AnyUpTehta', 'rdap'))
gpos.append(mark_to('base', 'UPTEHTA_RIGHT', ['silme.open', 'silme.lig_open', 'aare.open', '@Hyarmen'], 'uap', '@AnyUpTehta', 'ldap'))
gpos.append(mark_to('mark', 'UPTEHTA_UPTEHTA', '@AnyUpTehta', 'uap', '@AnyUpTehta', 'dap'))
gpos.append(mark_to('base', 'DOWNTEHTA', '@AnyTengwa', 'dap', '@AnyDownTehta', 'uap'))
gpos.append(mark_to('base', 'UNDERBAR_LEFT', '@StemDownRightTengwar', 'dap', '@UnderbarTehta', 'luap'))
gpos.append(mark_to('base', 'UNDERBAR_RIGHT', '@StemDownLeftTengwar', 'dap', '@UnderbarTehta', 'ruap'))
gpos.append(mark_to('base', 'DOWNTEHTA_LEFT', ['silmenuq', 'aarenuq', '@Alda', '@Mhtengwa'], 'dap', '@AnyDownTehta', 'ruap'))
gpos.append(mark_to('base', 'DOWNTEHTA_RIGHT', ['roomen.open', 'roomen.conl_open', 'arda.open', 'arda.conl_open', 'angwhtengwa'], 'dap', '@AnyDownTehta', 'luap'))
gpos.append(mark_to('base', 'LAMBE_DOWNTEHTA', ['@Lambe'], 'cap', '@AnyDownTehta', 'cap'))
gpos.append(mark_to('base', 'ALDA_DOWNTEHTA', ['@Alda'], 'cap', ['downutehta.long', 'underbar.lambe'], 'cap'))
gpos.append(mark_to('mark', 'DOWNTEHTA_DOWNTEHTA', '@AnyDownTehta', 'dap', '@AnyDownTehta', 'uap'))
gpos.append(mark_to('mark', 'ADJUST_ROOMEN_DOWNTEHTA', 'underbar.roomen', 'ldap', '@AnyDownTehta', 'luap'))
gpos.append(mark_to('mark', 'ADJUST_SILMENUQUERNA_DOWNTEHTA', 'underbar.silme', 'rdap', '@AnyDownTehta', 'ruap'))

with open('gpos.fea', 'w') as feafile:
	feafile.write('\n'.join(gpos))
