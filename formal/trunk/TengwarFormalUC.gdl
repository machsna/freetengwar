// Graphite Description Language file for Tengwar Formal Unicode
// Copyright: Copyleft 2010 j. 'mach' wust, Johan Winge
// Version: 2010-04-16
// http://freetengwar.sourceforge.net/formal.html
//
// This is free software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation, either version 3 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#define ps postscript
#define LG_USENG 0x0409

environment { MUnits = 2048; }

#include "TengwarFormalUC.gdh"


// --------------------------------------------------------------
// Feature table

table(feature)
/*
  silmepref {
    id=202;
    name.LG_USENG = string("Tehta on Silme");
    default = left;
    settings {
      left {
        value=0;
        name.LG_USENG = string("To the left");
      }
      right {
        value=3;
        name.LG_USENG = string("To the right");
      }
    }
  }
*/
  descwtengwa {
    id=204;
    name.LG_USENG = string("Descending W-tengwa");
    default = false;
  }
/*
  lowershook {
    id=205;
    name.LG_USENG = string("Prefer low S-hook");
    default = true;
  }
*/
  insertcarrier {
    id=212; // The numbers are arbitrary. Nevertheless, I want to avoid conflicts with tengtelc.
    name.LG_USENG = string("Short carrier insertion");
    default = false;
  }
  ossetail {
    id=207;
    name.LG_USENG = string("Marked Osse");
    default = none;
    settings {
      none {
        value=0;
        name.LG_USENG = string("Never");
      }
      final {
        value=1;
        name.LG_USENG = string("Word final");
      }
      all {
        value=2;
        name.LG_USENG = string("Always");
      }
    }
  }
  barstyle {
    id=209;
    name.LG_USENG = string("Bar style");
    default = straight;
    settings {
      straight {
        value=0;
        name.LG_USENG = string("Straight");
      }
      tilde {
        value=1;
        name.LG_USENG = string("Tilde");
      }
    }
  }

  atehtastyle {
    id=210;
    name.LG_USENG = string("A-tehta style");
    default = dots;
    settings {
      dots {
        value=0;
        name.LG_USENG = string("Dots");
      }
      circumflex {
        value=1;
        name.LG_USENG = string("Circumflex");
      }
    }
  }

  sarincestyle {
    id=211;
    name.LG_USENG = string("Sa-rince style");
    default = hook;
    settings {
      hook {
        value=0;
        name.LG_USENG = string("Hook");
      }
      swash {
        value=1;
        name.LG_USENG = string("Swash");
      }
    }
  }

endtable;

table(glyph)

  // --------------------------------------------------------------
  // Glyph table: Tengwar classes

  insertedcarrier = pseudo(postscript("shortCarrier"));
  insertedcarrierIntertehtar = pseudo(postscript("shortCarrier"));

  Normal = (calma,quesse,aha,hwesta,oore,anna,vala,vilya,
          calmaX,quesseX,roomen,arda,esseN,
          hyarmen,yanta,hwestaS,uure,osseN,lambeN,osse,carrierX,quesseC,hwestaC,
          valaX,annaX,vaiya,tengwardigit2,tengwardigit5,tengwardigit9);
  Carrier = (longCarrier,halla,shortCarrier,insertedcarrier,insertedcarrierIntertehtar,aha_tinco,hwesta_tinco,
          tehtaS,tehtaS_aha,tehtaS_hyarmen,tehtaS_lambelow,tehtaS_lifted,tehtaS_raisedalt,tehtaS_yanta);

  DownWide = (ando,umbar,anga,ungwe,anto,ampa,anca,unque,nuumen,malta,noldo,nwalme,
          andoX,umbarX,angaX,ungweX,alda,maltaX,silme_aha,tengwardigit3,tengwardigit6);
  DownNormal = (Normal,suule,formen,silme,esse,roomenN);
  DownNarrow = (tinco,parma,tincoX,parmaX,roomen_alt,arda_alt,hallaRoomen,
          tengwardigit0,tengwardigit1,tengwardigit4,tengwardigit7,tengwardigit8,tengwarduodecimal10,tengwarduodecimal11,tengwarduodecimal12,
          tehtaS_swash,tehtaS_swashhyarmen,tehtaS_swashhyarmenalt,tehtaS_swashlambe,tehtaS_swashraised,tehtaS_swashyanta,tehtaS_swashyantaalt);
  DownCarrier = (Carrier,silmeN);
  DownLambe = (lambe,lambeN_alt);

  UpWide = (DownWide,DownLambe,silme,esse);
  UpNormal = (Normal,tinco,parma,roomen_alt,arda_alt,silmeN);
  UpNarrow = (suule,formen,tincoX,parmaX,
          tehtaS_swash,tehtaS_swashhyarmen,tehtaS_swashhyarmenalt,tehtaS_swashlambe,tehtaS_swashraised,tehtaS_swashyanta,tehtaS_swashyantaalt);
  UpCarrier = (Carrier,hallaRoomen,roomenN);

  TakeLiftedSarince = (calmaX,quesseX,angaX,ungweX,halla,quesseC,vaiya,lambeN,roomenN);
  TakeAhaSarince = (aha,hwesta,anca,unque,noldo,anna,nwalme,vilya,annaX,silme_aha);
  TakeHyarmenSarince = (hyarmen);
  TakeYantaSwash = (yanta);
  TakeYantaSarince = (TakeYantaSwash,maltaX,valaX);
  TakeLambeSarince = (lambe,esse);
  TakeRaised = (calma,anga,quesse,ungwe,roomen,arda,silmeN,hwestaS,uure,hallaRoomen,osse,longCarrier,carrierX);
  TakeRaisedSwash   = (TakeRaised,calmaX,quesseX,angaX,ungweX);
  TakeRaisedSarince = (TakeRaised,alda);

  RightCombShook = (tinco,parma,ando,umbar,suule,formen,anto,ampa,tincoX,parmaX,andoX,umbarX,nuumen,malta,oore,vala,hallaRoomen,aha_tinco,hwesta_tinco);
  WideCombShook = (anga,ungwe,anca,unque,angaX,ungweX,noldo,nwalme);

  RoomenArda = ( roomen, arda );
  RoomenArdaAlt = ( roomen_alt, arda_alt );

  Specialswash = ( tehtaS_swashhyarmen, tehtaS_swashyanta );
  SpacySpecialswash = ( tehtaS_swashhyarmenalt, tehtaS_swashyantaalt );

//  LiftedShook = (calma,anga,aha,hwesta,anca,unque,calmaX,quesseX,angaX,ungweX,noldo,anna,hyarmen,yanta,halla,annaX,quesseC,vaiya,lambeN,roomenN);
//  RaisedShook = (quesse,ungwe,nwalme,vilya,roomen,arda,silmeN,hwestaS,hallaRoomen,osse,shortCarrier,longCarrier,carrierX);
//  LambeswashShook = (lambe,alda,esse);

  AnyTengwa=(UpWide,UpNormal,UpNarrow,UpCarrier);
  AnyTengwaORzwj=(ZWJ,AnyTengwa);


  // --------------------------------------------------------------
  // Glyph table: Tehtar classes

  // The eight classes of tehtar

  Oomaup       = ( tehtaA,        tehtaA_altshift2, tehtaAE,        tehtaAE_altshift2, tehtaBreve,        tehtaE,        tehtaGrave,        tehtaI,        tehtaO,        tehtaU,        tehtaY,        tehtaYanta,        tehtaE_tehtaE_shift2, tehtaGrave_tehtaGrave_shift2, tehtaO_tehtaI_shift2, tehtaO_tehtaI_shift2, tehtaO_tehtaO_shift2, tehtaU_tehtaI_shift2, tehtaU_tehtaI_shift2, tehtaU_tehtaU_shift2 );
  OomaupWide   = ( tehtaA_shift4, tehtaA_altshift4, tehtaAE_shift4, tehtaAE_altshift4, tehtaBreve_shift4, tehtaE_shift4, tehtaGrave_shift4, tehtaI_shift4, tehtaO_shift4, tehtaU_shift4, tehtaY_shift4, tehtaYanta_shift4, tehtaE_tehtaE_shift4, tehtaGrave_tehtaGrave_shift4, tehtaO_tehtaI_shift4, tehtaO_tehtaI_shift4, tehtaO_tehtaO_shift4, tehtaU_tehtaI_shift4, tehtaU_tehtaI_shift4, tehtaU_tehtaU_shift4 );
  OomaupNormal = ( tehtaA_shift3, tehtaA_altshift3, tehtaAE_shift3, tehtaAE_altshift3, tehtaBreve_shift3, tehtaE_shift3, tehtaGrave_shift3, tehtaI_shift3, tehtaO_shift3, tehtaU_shift3, tehtaY_shift3, tehtaYanta_shift3, tehtaE_tehtaE_shift3, tehtaGrave_tehtaGrave_shift3, tehtaO_tehtaI_shift3, tehtaO_tehtaI_shift3, tehtaO_tehtaO_shift3, tehtaU_tehtaI_shift3, tehtaU_tehtaI_shift3, tehtaU_tehtaU_shift3 );
  OomaupCarr   = ( tehtaA_shift1, tehtaA_altshift1, tehtaAE_shift1, tehtaAE_altshift1, tehtaBreve_shift1, tehtaE_shift1, tehtaGrave_shift1, tehtaI_shift1, tehtaO_shift1, tehtaU_shift1, tehtaY_shift1, tehtaYanta_shift1, tehtaE_tehtaE_shift1, tehtaGrave_tehtaGrave_shift1, tehtaO_tehtaI_shift1, tehtaO_tehtaI_shift1, tehtaO_tehtaO_shift1, tehtaU_tehtaI_shift1, tehtaU_tehtaI_shift1, tehtaU_tehtaU_shift1 );

  Nasal       = ( tehtaN,        tehtaN_narrowlow, tehtaN_altnarrow, tehtaN_altnarrowlow );
  NasalWide   = ( tehtaN_wide,   tehtaN_widelow,   tehtaN_altwide,   tehtaN_altwidelow   );
  NasalCarr   = ( tehtaN_shift1, tehtaN_shift1low, tehtaN_altshift1, tehtaN_altshift1low );

  Dotinside = ( tehtaDotInside );

  Doubler       = ( tehtaB,        tehtaB_altnarrow, tehtaEEB );
  DoublerWide   = ( tehtaB_wide,   tehtaB_altwide,   tehtaEEB_shift4 );
  DoublerNormal = ( tehtaB_narrow, tehtaB_altnarrow, tehtaEEB_shift3 );
  DoublerCarr   = ( tehtaB_shift1, tehtaB_altshift1, tehtaEEB_shift1 );
  DoublerLambe  = ( tehtaB_lambe,  tehtaB_altlambe,  tehtaEEB_lambe );

  Sarince      = ( tehtaX );
  SarinceWide  = ( tehtaX_shift4 );
  SarinceRight = ( tehtaX_down );

  Follw       = ( tehtaW,        tehtaW_combshift2 );
  FollWWide   = ( tehtaW_shift4, tehtaW_combshift4 );
  FollWNormal = ( tehtaW_shift3, tehtaW_combshift3 );
  FollWCarr   = ( tehtaW_shift1, tehtaW_combshift1 );

  Thinnas       = ( tehtaThinnas );
  ThinnasWide   = ( tehtaThinnas_shift4 );
  ThinnasNormal = ( tehtaThinnas_shift3 );
  ThinnasCarr   = ( tehtaThinnas_shift1 );

  Oomadown       = ( tehtaAB,        tehtaEB,        tehtaIB,        tehtaOB,        tehtaUB,        tehtaYB,        tengwardigitMark );
  OomadownWide   = ( tehtaAB_shift4, tehtaEB_shift4, tehtaIB_shift4, tehtaOB_shift4, tehtaUB_shift4, tehtaYB_shift4, tengwardigitMark_shift4 );
  OomadownNormal = ( tehtaAB_shift3, tehtaEB_shift3, tehtaIB_shift3, tehtaOB_shift3, tehtaUB_shift3, tehtaYB_shift3, tengwardigitMark_shift3 );
  OomadownCarr   = ( tehtaAB_shift1, tehtaEB_shift1, tehtaIB_shift1, tehtaOB_shift1, tehtaUB_shift1, tehtaYB_shift1, tengwardigitMark_shift1 );
  OomadownLambe  = ( tehtaAB_shift4, tehtaEB_shift4, tehtaIB_lambe,  tehtaOB_shift4, tehtaUB_shift4, tehtaYB_lambe,  tengwardigitMark_shift4 );


  // Other tehtar classes

  AnyTehta = ( Oomaup, Nasal, Dotinside, Doubler, Sarince, Follw, Thinnas, Oomadown );
  AnyTehtaORzwj = ( ZWJ, AnyTehta );
  anysign = ( AnyTengwa, AnyTehtaORzwj );

  OomaupNasal = ( Oomaup, Nasal );
  OomaupNasalDotinside = ( Oomaup, Nasal, Dotinside );
  OomaupNasalDotinsideDoubler = ( Oomaup, Nasal, Dotinside, Doubler );
  OomaupNasalDotinsideDoublerSarince = ( Oomaup, Nasal, Dotinside, Doubler, Sarince );
  OomaupNasalDotinsideDoublerSarinceFollw = ( Oomaup, Nasal, Dotinside, Doubler, Sarince, Follw );
  OomaupNasalDotinsideDoublerSarinceFollwThinnas = ( Oomaup, Nasal, Dotinside, Doubler, Sarince, Follw, Thinnas );

  tehtaBUToomaup = ( Nasal, Dotinside, Doubler, Sarince, Follw, Thinnas, Oomadown );
  tehtaBUTnasal = ( Oomaup, Dotinside, Doubler, Sarince, Follw, Thinnas, Oomadown );
  tehtaBUTdotinside = ( Oomaup, Nasal, Doubler, Sarince, Follw, Thinnas, Oomadown );
  tehtaBUTdoubler = ( Oomaup, Nasal, Dotinside, Sarince, Follw, Thinnas, Oomadown );
  tehtaBUTsarince = ( Oomaup, Nasal, Dotinside, Doubler, Follw, Thinnas, Oomadown );
  tehtaBUTfollw = ( Oomaup, Nasal, Dotinside, Doubler, Sarince, Thinnas, Oomadown );
  tehtaBUTthinnas = ( Oomaup, Nasal, Dotinside, Doubler, Sarince, Follw, Oomadown );
  tehtaBUToomadown = ( Oomaup, Nasal, Dotinside, Doubler, Sarince, Follw, Thinnas );

  DotinsideDoublerSarinceFollwThinnasOomadown = ( Dotinside, Doubler, Sarince, Follw, Thinnas, Oomadown );
  DoublerSarinceFollwThinnasOomadown = ( Doubler, Sarince, Follw, Thinnas, Oomadown );
  SarinceFollwThinnasOomadown = ( Sarince, Follw, Thinnas, Oomadown );
  FollwThinnasOomadown = ( Follw, Thinnas, Oomadown );
  ThinnasOomadown = ( Thinnas, Oomadown );


  OomaupTehtaW = ( Oomaup, tehtaW );
  OomaupFollW = ( Oomaup, Follw );

  PlainNasal  = ( tehtaN,           tehtaN_altnarrow );
  NarrowNasal = ( tehtaN_narrowlow, tehtaN_altnarrowlow );

  AnyTehtaGlyphORzwj = ( ZWJ, Oomaup, OomaupWide, OomaupNormal, OomaupCarr,
               Nasal, NasalWide, NasalCarr,
               Dotinside,
               DoublerWide, DoublerNormal, Doubler, DoublerCarr, DoublerLambe,
               Sarince, SarinceWide, SarinceRight,
               FollWWide, FollWNormal, Follw, FollWCarr,
               ThinnasWide, ThinnasNormal, Thinnas, ThinnasCarr,
               OomadownWide, OomadownNormal, Oomadown, OomadownCarr, OomadownLambe );
  TriggerThinnasShift = ( DoublerWide, DoublerNormal, Doubler, DoublerCarr,
               Oomadown, OomadownWide, OomadownNormal, Oomadown, OomadownCarr );

  UptehtaWide   = ( OomaupWide,   NasalWide,   FollWWide );
  UptehtaNormal = ( OomaupNormal, Nasal, FollWNormal );
  UptehtaNarrow = ( Oomaup, Nasal, Follw );
  UptehtaCarr   = ( OomaupCarr,   NasalCarr,   FollWCarr );

  DowntehtaWide =   ( DoublerWide,   ThinnasWide,   OomadownWide );
  DowntehtaNormal = ( DoublerNormal, ThinnasNormal, OomadownNormal );
  DowntehtaNarrow = ( Doubler, Thinnas, Oomadown );
  DowntehtaCarr =   ( DoublerCarr,   ThinnasCarr,   OomadownCarr );
  DowntehtaLambe =  ( DoublerLambe,  ThinnasWide,   OomadownLambe );

  NotUpTehta = (tehtaDotInside,tehtaX,DowntehtaNarrow,DowntehtaWide);

endtable;


// --------------------------------------------------------------
// Definition of variables

#define Upto7TehtaChars [[[[[[[AnyTehta]?AnyTehta]?AnyTehta]?AnyTehta]?AnyTehta]?AnyTehta]?AnyTehta]?
#define Upto7TehtaCharsORzwj [[[[[[[AnyTehtaORzwj]?AnyTehtaORzwj]?AnyTehtaORzwj]?AnyTehtaORzwj]?AnyTehtaORzwj]?AnyTehtaORzwj]?AnyTehtaORzwj]?
#define Upto7AnyTehtaGlyphsORzwj [[[[[[[AnyTehtaGlyphORzwj]?AnyTehtaGlyphORzwj]?AnyTehtaGlyphORzwj]?AnyTehtaGlyphORzwj]?AnyTehtaGlyphORzwj]?AnyTehtaGlyphORzwj]?AnyTehtaGlyphORzwj]?

#define AnytehtaBUToomaup [[[[[[[tehtaBUToomaup]?tehtaBUToomaup]?tehtaBUToomaup]?tehtaBUToomaup]?tehtaBUToomaup]?tehtaBUToomaup]?tehtaBUToomaup]?
#define AnytehtaBUTnasal [[[[[[[tehtaBUTnasal]?tehtaBUTnasal]?tehtaBUTnasal]?tehtaBUTnasal]?tehtaBUTnasal]?tehtaBUTnasal]?tehtaBUTnasal]?
#define AnytehtaBUTdotinside [[[[[[[tehtaBUTdotinside]?tehtaBUTdotinside]?tehtaBUTdotinside]?tehtaBUTdotinside]?tehtaBUTdotinside]?tehtaBUTdotinside]?tehtaBUTdotinside]?
#define AnytehtaBUTdoubler [[[[[[[tehtaBUTdoubler]?tehtaBUTdoubler]?tehtaBUTdoubler]?tehtaBUTdoubler]?tehtaBUTdoubler]?tehtaBUTdoubler]?tehtaBUTdoubler]?
#define AnytehtaBUTsarince [[[[[[[tehtaBUTsarince]?tehtaBUTsarince]?tehtaBUTsarince]?tehtaBUTsarince]?tehtaBUTsarince]?tehtaBUTsarince]?tehtaBUTsarince]?
#define AnytehtaBUTfollw [[[[[[[tehtaBUTfollw]?tehtaBUTfollw]?tehtaBUTfollw]?tehtaBUTfollw]?tehtaBUTfollw]?tehtaBUTfollw]?tehtaBUTfollw]?
#define AnytehtaBUTthinnas [[[[[[[tehtaBUTthinnas]?tehtaBUTthinnas]?tehtaBUTthinnas]?tehtaBUTthinnas]?tehtaBUTthinnas]?tehtaBUTthinnas]?tehtaBUTthinnas]?
#define AnytehtaBUToomadown [[[[[[[tehtaBUToomadown]?tehtaBUToomadown]?tehtaBUToomadown]?tehtaBUToomadown]?tehtaBUToomadown]?tehtaBUToomadown]?tehtaBUToomadown]?

#define AnyDotinsideDoublerSarinceFollwThinnasOomadown [[[[[[DotinsideDoublerSarinceFollwThinnasOomadown]?DotinsideDoublerSarinceFollwThinnasOomadown]?DotinsideDoublerSarinceFollwThinnasOomadown]?DotinsideDoublerSarinceFollwThinnasOomadown]?DotinsideDoublerSarinceFollwThinnasOomadown]?DotinsideDoublerSarinceFollwThinnasOomadown]?
#define AnyDoublerSarinceFollwThinnasOomadown [[[[[DoublerSarinceFollwThinnasOomadown]?DoublerSarinceFollwThinnasOomadown]?DoublerSarinceFollwThinnasOomadown]?DoublerSarinceFollwThinnasOomadown]?DoublerSarinceFollwThinnasOomadown]?
#define AnySarinceFollwThinnasOomadown [[[[SarinceFollwThinnasOomadown]?SarinceFollwThinnasOomadown]?SarinceFollwThinnasOomadown]?SarinceFollwThinnasOomadown]?
#define AnyFollwThinnasOomadown [[[FollwThinnasOomadown]?FollwThinnasOomadown]?FollwThinnasOomadown]?
#define AnyThinnasOomadown [[ThinnasOomadown]?ThinnasOomadown]?
#define AnyOomadown [Oomadown]?


table(substitution)

  // --------------------------------------------------------------
  // Substitution table: Switches, ligatures, spacing sarince
  pass(1)

    aha ZWJ tinco > aha_tinco:(1 2 3) _ _ ;
    hwesta ZWJ tinco > hwesta_tinco:(1 2 3) _ _ ;
    silme ZWJ aha > silme_aha:(1 2 3) _ _ ;
    tehtaI tehtaO > tehtaO_tehtaI_shift2:(1 2) _ ;
    tehtaO tehtaI > tehtaO_tehtaI_shift2:(1 2) _ ;
    tehtaI tehtaU > tehtaU_tehtaI_shift2:(1 2) _ ;
    tehtaU tehtaI > tehtaU_tehtaI_shift2:(1 2) _ ;
    tehtaE tehtaE > tehtaE_tehtaE_shift2:(1 2) _ ;
    tehtaGrave tehtaGrave > tehtaGrave_tehtaGrave_shift2:(1 2) _ ;
    tehtaO tehtaO > tehtaO_tehtaO_shift2:(1 2) _ ;
    tehtaU tehtaU > tehtaU_tehtaU_shift2:(1 2) _ ;
    ZWJ longCarrier > tehtaThinnas:(1 2) _ ;
    tehtaI tehtaI > tehtaY:(1 2) _ ;

  endpass;


  // --------------------------------------------------------------
  // Substitution table: Insertion: Oomaup
  pass(2)

    if (insertcarrier)
      _ > insertedcarrier:10 / Oomaup AnytehtaBUToomaup _ Oomaup ;
    endif;

  endpass;


  // --------------------------------------------------------------
  // Substitution table: Insertion: Nasal
  pass(3)

    if (insertcarrier)
      _ > insertedcarrier:10 / Nasal AnytehtaBUTnasal _ Nasal ;
    endif;

  endpass;
  pass(4)

    if (insertcarrier)
      insertedcarrier > _ / insertedcarrier Nasal AnyDotinsideDoublerSarinceFollwThinnasOomadown _ Oomaup ;
    endif;

  endpass;


  // --------------------------------------------------------------
  // Substitution table: Insertion: Dotinside
  pass(5)

    if (insertcarrier)
      _ > insertedcarrier:10 / Dotinside AnytehtaBUTdotinside _ Dotinside ;
    endif;

  endpass;
  pass(6)

    if (insertcarrier)
      insertedcarrier > _ / insertedcarrier Dotinside AnyDoublerSarinceFollwThinnasOomadown _ OomaupNasal ;
    endif;

  endpass;


  // --------------------------------------------------------------
  // Substitution table: Insertion: Doubler
  pass(7)

    if (insertcarrier)
      _ > insertedcarrier:10 / Doubler AnytehtaBUTdoubler _ Doubler ;
    endif;

  endpass;
  pass(8)

    if (insertcarrier)
      insertedcarrier > _ / insertedcarrier Doubler AnySarinceFollwThinnasOomadown _ OomaupNasalDotinside ;
    endif;

  endpass;


  // --------------------------------------------------------------
  // Substitution table: Insertion: Sarince
  pass(9)

    if (insertcarrier)
      _ > insertedcarrier:10 / Sarince AnytehtaBUTsarince _ Sarince ;
    endif;

  endpass;
  pass(10)

    if (insertcarrier)
      insertedcarrier > _ / insertedcarrier Sarince AnyFollwThinnasOomadown _ OomaupNasalDotinsideDoubler ;
    endif;

  endpass;


  // --------------------------------------------------------------
  // Substitution table: Insertion: Follw
  pass(11)

    if (insertcarrier)
      _ > insertedcarrier:10 / Follw AnytehtaBUTfollw _ Follw ;
    endif;

  endpass;
  pass(12)

    if (insertcarrier)
      insertedcarrier > _ / insertedcarrier Follw AnyThinnasOomadown _ OomaupNasalDotinsideDoublerSarince ;
    endif;

  endpass;


  // --------------------------------------------------------------
  // Substitution table: Insertion: Thinnas
  pass(13)

    if (insertcarrier)
      _ > insertedcarrier:10 / Thinnas AnytehtaBUTthinnas _ Thinnas ;
    endif;

  endpass;
  pass(14)

    if (insertcarrier)
      insertedcarrier > _ / insertedcarrier Thinnas AnyOomadown _ OomaupNasalDotinsideDoublerSarinceFollw ;
    endif;

  endpass;


  // --------------------------------------------------------------
  // Substitution table: Insertion: Oomadown
  pass(15)

    if (insertcarrier)
      _ > insertedcarrier:10 / Oomadown AnytehtaBUToomadown _ Oomadown ;
    endif;

  endpass;
  pass(16)

    if (insertcarrier)
      insertedcarrier > _ / insertedcarrier Oomadown _ OomaupNasalDotinsideDoublerSarinceFollwThinnas ;
    endif;

  endpass;


  // --------------------------------------------------------------
  // Substitution table: Initial carrier: First step: Sprinkle carriers
  pass(17)

    if (insertcarrier)
      _ > insertedcarrierIntertehtar:2 / _ AnyTehta ^ ;
    endif;

  endpass;


  // --------------------------------------------------------------
  // Substitution table: Delete superfluous carriers
  pass(18)

    insertedcarrierIntertehtar > _ / anysign _ ;
    ZWJ insertedcarrier > _ _ ;

  endpass;


  // --------------------------------------------------------------
  // Substitution table: Switches
  pass(19)

    if (barstyle==tilde)
      tehtaN > tehtaN_altnarrow / _ ;
      tehtaB > tehtaB_altnarrow / _ ;
    endif;

    if (descwtengwa)
      lambeN > lambeN_alt;
    endif;

    if (ossetail==all || ossetail==final)
      osse > osse_alt ;
    endif;

    if (atehtastyle==circumflex)
      tehtaA > tehtaA_altshift2;
      tehtaAE > tehtaAE_altshift2;
    endif;

    if (sarincestyle==hook)
       tehtaS > tehtaS_lifted / TakeLiftedSarince Upto7TehtaCharsORzwj _ ;
       tehtaS > tehtaS_aha / TakeAhaSarince Upto7TehtaCharsORzwj _ ;
       tehtaS > tehtaS_hyarmen / TakeHyarmenSarince Upto7TehtaCharsORzwj _ ;
       tehtaS > tehtaS_lambelow / TakeLambeSarince Upto7TehtaCharsORzwj _ ;
       tehtaS > tehtaS_raisedalt / TakeRaisedSarince Upto7TehtaCharsORzwj _ ;
       tehtaS > tehtaS_yanta / TakeYantaSarince Upto7TehtaCharsORzwj _ ;
    elseif (sarincestyle==swash)
       tehtaS > tehtaS_swashhyarmen / TakeHyarmenSarince Upto7TehtaCharsORzwj _ ;
       tehtaS > tehtaS_swashyanta / TakeYantaSwash Upto7TehtaCharsORzwj _ ;
       tehtaS > tehtaS_swashlambe / TakeLambeSarince Upto7TehtaCharsORzwj _ ;
       tehtaS > tehtaS_swashraised / TakeRaisedSwash Upto7TehtaCharsORzwj _ ; 
       tehtaS > tehtaS_swash / _ ;

    endif;

  endpass;


  // --------------------------------------------------------------
  // Substitution table
  pass(20)

    if (ossetail==final)
       (osse_alt) > (osse) / ^ _ Upto7TehtaCharsORzwj AnyTengwa;
    endif;

    tehtaW > tehtaW_combshift2 / _ Upto7TehtaChars OomaupTehtaW ;
    tehtaW > tehtaW_combshift2 / OomaupTehtaW Upto7TehtaChars _ ;

    RoomenArda > RoomenArdaAlt / _ Upto7TehtaCharsORzwj DowntehtaNarrow ;

  endpass;


  // --------------------------------------------------------------
  // Substitution table: conditional glyph changes
  pass(21)

    PlainNasal > NarrowNasal / ^ _ Upto7TehtaCharsORzwj OomaupFollW ;
    PlainNasal > NarrowNasal / OomaupFollW Upto7TehtaCharsORzwj _ ;

    RoomenArdaAlt > RoomenArda / _ Upto7TehtaCharsORzwj tehtaUB ;

    Specialswash > SpacySpecialswash / _ Upto7TehtaCharsORzwj AnyTehta ;

  endpass;


  // --------------------------------------------------------------
  // Substitution table: tehtar
  pass(22)

    tehtaX > tehtaX_shift4 / WideCombShook Upto7AnyTehtaGlyphsORzwj _ ;
    tehtaX > tehtaX_down / RightCombShook Upto7AnyTehtaGlyphsORzwj _ ;

    UptehtaNarrow > UptehtaWide / UpWide Upto7AnyTehtaGlyphsORzwj _ ;
    UptehtaNarrow > UptehtaNormal / UpNormal Upto7AnyTehtaGlyphsORzwj _ ;
    UptehtaNarrow > UptehtaCarr / UpCarrier Upto7AnyTehtaGlyphsORzwj _ ;

    DowntehtaNarrow > DowntehtaWide / DownWide Upto7AnyTehtaGlyphsORzwj _ ;
    DowntehtaNarrow > DowntehtaNormal / DownNormal Upto7AnyTehtaGlyphsORzwj _ ;
    DowntehtaNarrow > DowntehtaCarr / DownCarrier Upto7AnyTehtaGlyphsORzwj _ ;
    DowntehtaNarrow > DowntehtaLambe / DownLambe Upto7AnyTehtaGlyphsORzwj _ ;

  endpass;


  // --------------------------------------------------------------
  // Substitution table: shift thinnas
  pass(23)

    (ThinnasWide,ThinnasNormal,Thinnas) > ThinnasCarr / TriggerThinnasShift Upto7AnyTehtaGlyphsORzwj _ ;
    (ThinnasWide,ThinnasNormal,Thinnas) > ThinnasCarr / _ Upto7AnyTehtaGlyphsORzwj TriggerThinnasShift ;

  endpass;

endtable;


// --------------------------------------------------------------
// Position table: This is a workaround for what seems to be a bug in XeTeX

table(position)
  pass(1)
    AnyTehtaGlyphORzwj { advance.x = 0; };
  endpass;
endtable;

endenvironment;

