// This is free software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation, either version 3 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#define ps postscript
#define LG_USENG 0x0409

environment { MUnits = 2048; }

#include "TengwarFormalUC.gdh"

table(feature)
/*
  silmepref {
    id=202;
    name.LG_USENG = string("Tehta on Silme");
    default = left;
    settings {
      left {
        value=0;
        name.LG_USENG = string("To the left");
      }
      right {
        value=3;
        name.LG_USENG = string("To the right");
      }
    }
  }
*/
  descwtengwa {
    id=204;
    name.LG_USENG = string("Descending W-tengwa");
    default = false;
  }
/*
  lowershook {
    id=205;
    name.LG_USENG = string("Prefer low S-hook");
    default = true;
  }
*/
/*  insertcarrier {
    id=212; // The numbers are arbitrary. Nevertheless, I want to avoid conflicts with tengtelc.
    name.LG_USENG = string("Short carrier insertion");
    default = false;
  }*/
  ossetail {
    id=207;
    name.LG_USENG = string("Marked Osse");
    default = none;
    settings {
      none {
        value=0;
        name.LG_USENG = string("Never");
      }
      final {
        value=1;
        name.LG_USENG = string("Word final");
      }
      all {
        value=2;
        name.LG_USENG = string("Always");
      }
    }
  }
  barstyle {
    id=209;
    name.LG_USENG = string("Bar style");
    default = straight;
    settings {
      straight {
        value=0;
        name.LG_USENG = string("Straight");
      }
      tilde {
        value=1;
        name.LG_USENG = string("Tilde");
      }
    }
  }

  atehtastyle {
    id=210;
    name.LG_USENG = string("A-tehta style");
    default = dots;
    settings {
      dots {
        value=0;
        name.LG_USENG = string("Dots");
      }
      circumflex {
        value=1;
        name.LG_USENG = string("Circumflex");
      }
    }
  }

  sarincestyle {
    id=211;
    name.LG_USENG = string("Sa-rince style");
    default = hook;
    settings {
      hook {
        value=0;
        name.LG_USENG = string("Hook");
      }
      swash {
        value=1;
        name.LG_USENG = string("Swash");
      }
    }
  }

endtable;

table(glyph)


// Tengwar Definitions

pseudoCarrier = pseudo(postscript("shortCarrier"));

  Normal = (calma,quesse,aha,hwesta,oore,anna,vala,vilya,
          calmaX,quesseX,roomen,arda,esseN,
          hyarmen,yanta,hwestaS,uure,osseN,lambeN,osse,carrierX,quesseC,hwestaC,
          valaX,annaX,vaiya,tengwardigit2,tengwardigit5,tengwardigit9);
  Carrier = (longCarrier,halla,shortCarrier/*,pseudoCarrier*/,aha_tinco,hwesta_tinco,
          tehtaS,tehtaS_aha,tehtaS_hyarmen,tehtaS_lambelow,tehtaS_lifted,tehtaS_raisedalt,tehtaS_yanta);

  DownWide = (ando,umbar,anga,ungwe,anto,ampa,anca,unque,nuumen,malta,noldo,nwalme,
          andoX,umbarX,angaX,ungweX,alda,maltaX,silme_aha,lambeN_alt,tengwardigit3,tengwardigit6);
  DownNormal = (Normal,suule,formen,silme,esse,roomenN);
  DownNarrow = (tinco,parma,tincoX,parmaX,roomen_alt,arda_alt,hallaRoomen,
          tengwardigit0,tengwardigit1,tengwardigit4,tengwardigit7,tengwardigit8,tengwarduodecimal10,tengwarduodecimal11,tengwarduodecimal12,
          tehtaS_swash,tehtaS_swashhyarmen,tehtaS_swashhyarmenalt,tehtaS_swashlambe,tehtaS_swashraised,tehtaS_swashyanta,tehtaS_swashyantaalt);
  DownCarrier = (Carrier,silmeN);

  UpWide = (DownWide,lambe,silme,esse);
  UpNormal = (Normal,tinco,parma,roomen_alt,arda_alt,silmeN);
  UpNarrow = (suule,formen,tincoX,parmaX,
          tehtaS_swash,tehtaS_swashhyarmen,tehtaS_swashhyarmenalt,tehtaS_swashlambe,tehtaS_swashraised,tehtaS_swashyanta,tehtaS_swashyantaalt);
  UpCarrier = (Carrier,hallaRoomen,roomenN);

  RightCombShook = (tinco,parma,ando,umbar,suule,formen,anto,ampa,tincoX,parmaX,andoX,umbarX,nuumen,malta,oore,vala,hallaRoomen,aha_tinco,hwesta_tinco);
  WideCombShook = (anga,ungwe,anca,unque,angaX,ungweX,noldo,nwalme);

//  LiftedShook = (calma,anga,aha,hwesta,anca,unque,calmaX,quesseX,angaX,ungweX,noldo,anna,hyarmen,yanta,halla,annaX,quesseC,vaiya,lambeN,roomenN);
//  RaisedShook = (quesse,ungwe,nwalme,vilya,roomen,arda,silmeN,hwestaS,hallaRoomen,osse,shortCarrier,longCarrier,carrierX);
//  LambeswashShook = (lambe,alda,esse);

  AnyTengwa=(UpWide,UpNormal,UpNarrow,UpCarrier);


// The eight classes of tehtar

  Oomaup       = ( tehtaA,        tehtaA_altshift2, tehtaAE,        tehtaAE_altshift2, tehtaBreve,        tehtaE,        tehtaGrave,        tehtaI,        tehtaO,        tehtaU,        tehtaY,        tehtaYanta,        tehtaE_tehtaE_shift2, tehtaGrave_tehtaGrave_shift2, tehtaO_tehtaI_shift2, tehtaO_tehtaI_shift2, tehtaO_tehtaO_shift2, tehtaU_tehtaI_shift2, tehtaU_tehtaI_shift2, tehtaU_tehtaU_shift2 );
  OomaupWide   = ( tehtaA_shift4, tehtaA_altshift4, tehtaAE_shift4, tehtaAE_altshift4, tehtaBreve_shift4, tehtaE_shift4, tehtaGrave_shift4, tehtaI_shift4, tehtaO_shift4, tehtaU_shift4, tehtaY_shift4, tehtaYanta_shift4, tehtaE_tehtaE_shift4, tehtaGrave_tehtaGrave_shift4, tehtaO_tehtaI_shift4, tehtaO_tehtaI_shift4, tehtaO_tehtaO_shift4, tehtaU_tehtaI_shift4, tehtaU_tehtaI_shift4, tehtaU_tehtaU_shift4 );
  OomaupNormal = ( tehtaA_shift3, tehtaA_altshift3, tehtaAE_shift3, tehtaAE_altshift3, tehtaBreve_shift3, tehtaE_shift3, tehtaGrave_shift3, tehtaI_shift3, tehtaO_shift3, tehtaU_shift3, tehtaY_shift3, tehtaYanta_shift3, tehtaE_tehtaE_shift3, tehtaGrave_tehtaGrave_shift3, tehtaO_tehtaI_shift3, tehtaO_tehtaI_shift3, tehtaO_tehtaO_shift3, tehtaU_tehtaI_shift3, tehtaU_tehtaI_shift3, tehtaU_tehtaU_shift3 );
  OomaupNarrow = ( tehtaA_shift2, tehtaA_altshift2, tehtaAE_shift2, tehtaAE_altshift2, tehtaBreve_shift2, tehtaE_shift2, tehtaGrave_shift2, tehtaI_shift2, tehtaO_shift2, tehtaU_shift2, tehtaY_shift2, tehtaYanta_shift2, tehtaE_tehtaE_shift2, tehtaGrave_tehtaGrave_shift2, tehtaO_tehtaI_shift2, tehtaO_tehtaI_shift2, tehtaO_tehtaO_shift2, tehtaU_tehtaI_shift2, tehtaU_tehtaI_shift2, tehtaU_tehtaU_shift2 );
  OomaupCarr   = ( tehtaA_shift1, tehtaA_altshift1, tehtaAE_shift1, tehtaAE_altshift1, tehtaBreve_shift1, tehtaE_shift1, tehtaGrave_shift1, tehtaI_shift1, tehtaO_shift1, tehtaU_shift1, tehtaY_shift1, tehtaYanta_shift1, tehtaE_tehtaE_shift1, tehtaGrave_tehtaGrave_shift1, tehtaO_tehtaI_shift1, tehtaO_tehtaI_shift1, tehtaO_tehtaO_shift1, tehtaU_tehtaI_shift1, tehtaU_tehtaI_shift1, tehtaU_tehtaU_shift1 );

  Nasal       = ( tehtaN_narrow, tehtaN_narrowlow, tehtaN_altnarrow, tehtaN_altnarrowlow );
  NasalWide   = ( tehtaN_wide,   tehtaN_widelow,   tehtaN_altwide,   tehtaN_altwidelow   );

  Dotinside = ( tehtaDotInside );

  Doubler       = ( tehtaB_narrow, tehtaB_altnarrow, tehtaEEB );
  DoublerWide   = ( tehtaB_wide,   tehtaB_altwide,   tehtaEEB_shift4 );
  DoublerNormal = ( tehtaB_narrow, tehtaB_altnarrow, tehtaEEB_shift3 );
  DoublerNarrow = ( tehtaB_narrow, tehtaB_altnarrow, tehtaEEB_shift2 );
  DoublerCarr   = ( tehtaB_narrow, tehtaB_altnarrow, tehtaEEB_shift1 );
  DoublerLambe  = ( tehtaB_lambe,  tehtaB_altlambe,  tehtaEEB_lambe );

  Sarince = ( tehtaX );
  SarinceWide = ( tehtaX_shift4 );
  SarinceRight = ( tehtaX_down );

  FollW       = ( tehtaW,        tehtaW_combshift2 );
  FollWWide   = ( tehtaW_shift4, tehtaW_combshift4 );
  FollWNormal = ( tehtaW_shift3, tehtaW_combshift3 );
  FollWNarrow = ( tehtaW_shift2, tehtaW_combshift2 );
  FollWCarr   = ( tehtaW_shift1, tehtaW_combshift1 );

  Thinnas =       ( tehtaThinnas );
  ThinnasWide =   ( tehtaThinnas_shift4 );
  ThinnasNormal = ( tehtaThinnas_shift3 );
  ThinnasNarrow = ( tehtaThinnas_shift2 );
  ThinnasCarr =   ( tehtaThinnas_shift1 );

  Oomadown       = ( tehtaAB,        tehtaEB,        tehtaIB,        tehtaOB,        tehtaUB,        tehtaYB,        tengwardigitMark );
  OomadownWide   = ( tehtaAB_shift4, tehtaEB_shift4, tehtaIB_shift4, tehtaOB_shift4, tehtaUB_shift4, tehtaYB_shift4, tengwardigitMark_shift4 );
  OomadownNormal = ( tehtaAB_shift3, tehtaEB_shift3, tehtaIB_shift3, tehtaOB_shift3, tehtaUB_shift3, tehtaYB_shift3, tengwardigitMark_shift3 );
  OomadownNarrow = ( tehtaAB_shift2, tehtaEB_shift2, tehtaIB_shift2, tehtaOB_shift2, tehtaUB_shift2, tehtaYB_shift2, tengwardigitMark_shift2 );
  OomadownCarr   = ( tehtaAB_shift1, tehtaEB_shift1, tehtaIB_shift1, tehtaOB_shift1, tehtaUB_shift1, tehtaYB_shift1, tengwardigitMark_shift1 );
  OomadownLambe  = ( tehtaAB_shift1, tehtaEB_shift1, tehtaIB_lambe,  tehtaOB_shift1, tehtaUB_shift1, tehtaYB_lambe,  tengwardigitMark_shift1 );


// Other tehtar definitions

  AnyIsolTehta = ( Oomaup, Nasal, Dotinside, Doubler, Sarince, FollW, Thinnas, Oomadown );
  AnyTehta = ( Oomaup, OomaupWide, OomaupNormal, OomaupNarrow, OomaupCarr,
               Nasal, NasalWide,
               Dotinside,
               Doubler, DoublerWide, DoublerNormal, DoublerNarrow, DoublerCarr, DoublerLambe,
               Sarince, SarinceWide, SarinceRight,
               FollW, FollWWide, FollWNormal, FollWNarrow, FollWCarr,
               Thinnas, ThinnasWide, ThinnasNormal, ThinnasNarrow, ThinnasCarr,
               Oomadown, OomadownWide, OomadownNormal, OomadownNarrow, OomadownCarr, OomadownLambe );
  AnyDowntehtaBUTthinnas = ( Doubler, DoublerWide, DoublerNormal, DoublerNarrow, DoublerCarr, DoublerLambe,
               Oomadown, OomadownWide, OomadownNormal, OomadownNarrow, OomadownCarr, OomadownLambe );

  Uptehta       = ( Oomaup,       Nasal,     FollW );
  UptehtaWide   = ( OomaupWide,   NasalWide, FollWWide );
  UptehtaNormal = ( OomaupNormal, Nasal,     FollWNormal );
  UptehtaNarrow = ( OomaupNarrow, Nasal,     FollWNarrow );
  UptehtaCarr   = ( OomaupCarr,   Nasal,     FollWCarr );

  Downtehta =       ( Doubler,       Thinnas,       Oomadown );
  DowntehtaWide =   ( DoublerWide,   ThinnasWide,   OomadownWide );
  DowntehtaNormal = ( DoublerNormal, ThinnasNormal, OomadownNormal );
  DowntehtaNarrow = ( DoublerNarrow, ThinnasNarrow, OomadownNarrow );
  DowntehtaCarr =   ( DoublerCarr,   ThinnasCarr,   OomadownCarr );
  DowntehtaLambe =  ( DoublerLambe,  ThinnasWide,   OomadownLambe );

  NotUpTehta = (tehtaDotInside,tehtaX,Downtehta,DowntehtaWide);

endtable;

#define AnyIsolTehtar [[[[AnyIsolTehta]?AnyIsolTehta]?AnyIsolTehta]?AnyIsolTehta]?
#define AnyTehtar [[[AnyTehta]?AnyTehta]?AnyTehta]?
//#define NotupORpseudoCarrier [[[[[[pseudoCarrier]?NotUpTehta]?pseudoCarrier]?NotUpTehta]?pseudoCarrier]?NotUpTehta]?

table(substitution)

  pass(1) // Switches, ligatures, spacing sarince

    if (barstyle==straight)
      tehtaN > tehtaN_narrow / _ ;
      tehtaB > tehtaB_narrow / _ ;
    elseif (barstyle==tilde)
      tehtaN > tehtaN_altnarrow / _ ;
      tehtaB > tehtaB_altnarrow / _ ;
    endif;

    if (descwtengwa)
      lambeN > lambeN_alt;
    endif;

    if (ossetail==all || ossetail==final)
      osse > osse_alt ;
    endif;

    if (atehtastyle==circumflex)
      tehtaA > tehtaA_altshift2;
      tehtaAE > tehtaAE_altshift2;
    endif;

    if (sarincestyle==hook)
       tehtaS > tehtaS_lifted / (calmaX,quesseX,angaX,ungweX,halla,quesseC,vaiya,lambeN,roomenN) AnyIsolTehtar _ ;
       tehtaS > tehtaS_aha / (aha,hwesta,anca,unque,noldo,anna,nwalme,vilya,annaX,silme_aha) AnyIsolTehtar _ ;
       tehtaS > tehtaS_hyarmen / (hyarmen) AnyIsolTehtar _ ;
       tehtaS > tehtaS_lambelow / (lambe,esse) AnyIsolTehtar _ ;
       tehtaS > tehtaS_raisedalt / (calma,anga,quesse,ungwe,roomen,arda,alda,silmeN,hwestaS,uure,hallaRoomen,osse,longCarrier,carrierX) AnyIsolTehtar _ ;
       tehtaS > tehtaS_yanta / (yanta,maltaX,valaX) AnyIsolTehtar _ ;
    elseif (sarincestyle==swash)
       tehtaS > tehtaS_swash / (tinco,parma,ando,umbar,suule,formen,anto,ampa,nuumen,malta,oore,vala,tincoX,parmaX,andoX,umbarX,alda,silme,esseN,shortCarrier,osseN,maltaX,valaX,aha_tinco,hwesta_tinco,silme_aha) AnyIsolTehtar _ ;
       tehtaS > tehtaS_swash / (halla,quesseC,vaiya,lambeN,roomenN) AnyIsolTehtar _ ;
       tehtaS > tehtaS_swash / (aha,hwesta,anca,unque,noldo,anna,nwalme,vilya,annaX) AnyIsolTehtar _ ;
       tehtaS > tehtaS_swashhyarmen / (hyarmen) AnyIsolTehtar _ ;
       tehtaS > tehtaS_swashyanta / (yanta) AnyIsolTehtar _ ;
       tehtaS > tehtaS_swashlambe / (lambe,esse) AnyIsolTehtar _ ;
       tehtaS > tehtaS_swashraised / (calma,anga,quesse,ungwe,roomen,arda,silmeN,hwestaS,uure,hallaRoomen,osse,longCarrier,carrierX,calmaX,quesseX,angaX,ungweX) AnyIsolTehtar _ ; 
//    tehtaS > tehtaS_lifted / LiftedShook AnyTehtar _ ;
//    tehtaS > tehtaS_raised / RaisedShook AnyTehtar _ ;
//    tehtaS > tehtaS_swashlambe / LambeswashShook AnyTehtar _ ;
    endif;

/*	if (insertcarrier)
//		_ > pseudoCarrier:2 / _ AnyIsolTehta ^ ;
		_ > pseudoCarrier:2 / _ (tehtaN_narrow, tehtaN_narrowlow, tehtaN_altnarrow, tehtaN_altnarrowlow, tehtaN_wide,   tehtaN_widelow,   tehtaN_altwide,   tehtaN_altwidelow) ^ ;// it puzzles me that the bars are immune to this rule???
	endif;*/

  endpass;
  pass(2)

	tehtaW > tehtaW_combshift2 / _ AnyIsolTehtar (Oomaup,tehtaW) ;
	tehtaW > tehtaW_combshift2 / (Oomaup,tehtaW) AnyIsolTehtar _ ;

    (tehtaN_narrow,tehtaN_altnarrow) > (tehtaN_narrowlow,tehtaN_altnarrowlow) / ^ _ AnyIsolTehtar (Oomaup,FollW) ;
    (tehtaN_narrow,tehtaN_altnarrow) > (tehtaN_narrowlow,tehtaN_altnarrowlow) / (Oomaup,FollW) AnyIsolTehtar _ ;

    (roomen,arda) > (roomen_alt,arda_alt) / _ AnyIsolTehtar Downtehta ;

//	pseudoCarrier > _ / AnyTengwa NotupORpseudoCarrier _ ;

  endpass;
  pass(3)

    if (ossetail==final)
       (osse_alt) > (osse) / ^ _ AnyIsolTehtar ZWJ? AnyTengwa;
    endif;

    (roomen_alt,arda_alt) > (roomen,arda) / _ AnyIsolTehtar (tehtaUB) ;

    tehtaX > tehtaX_shift4 / WideCombShook AnyTehtar _ ;
    tehtaX > tehtaX_down / RightCombShook AnyTehtar _ ;

    (tehtaS_swashhyarmen,tehtaS_swashyanta) > (tehtaS_swashhyarmenalt,tehtaS_swashyantaalt) / _ AnyIsolTehtar AnyIsolTehta ;

    Uptehta > UptehtaWide / UpWide AnyTehtar _ ;
    Uptehta > UptehtaNormal / UpNormal AnyTehtar _ ;
//    Uptehta > UptehtaNarrow / UpNarrow AnyTehtar _ ;
    Uptehta > UptehtaCarr / UpCarrier AnyTehtar _ ;

    Downtehta > DowntehtaWide / DownWide AnyTehtar _ ;
    Downtehta > DowntehtaNormal / DownNormal AnyTehtar _ ;
//    Downtehta > DowntehtaNarrow / DownNarrow AnyTehtar _ ;
    Downtehta > DowntehtaCarr / DownCarrier AnyTehtar _ ;
    Downtehta > DowntehtaLambe / lambe AnyTehtar _ ;

  endpass;
  pass(4)

    (Thinnas,ThinnasWide,ThinnasNormal,ThinnasNarrow) > ThinnasCarr / AnyDowntehtaBUTthinnas AnyTehtar _ ;
    (Thinnas,ThinnasWide,ThinnasNormal,ThinnasNarrow) > ThinnasCarr / _ AnyTehtar AnyDowntehtaBUTthinnas ;

  endpass;
  

endtable;

table(position)
  pass(1)
    // This is a workaround for what seems to be a bug in XeTeX:
    AnyTehta { advance.x = 0; };
  endpass;
endtable;

endenvironment;

